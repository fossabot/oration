var N = null;var searchIndex = {};
searchIndex["oration"]={"doc":"Oration: a Rocket/Elm self hosted commenting system for static sites.","items":[[3,"Initialise","oration","Information sent to the client upon initialisation.",N,N],[12,"user_ip","","The clients' ip address, hashed via Sha224.",0,N],[12,"blog_author","","The Sha224 hash of the blog author to distinguish the authority on this blog.",0,N],[12,"edit_timeout","","Time frame in which users can edit thier own comments.",0,N],[3,"CommentId","","Used in conjuction with `/delete?` and `/edit?`.",N,N],[12,"id","","The id of the requested comment.",1,N],[3,"Post","","Used in conjuction with `/count?` and `/comments?`.",N,N],[12,"url","","Gets the url for the request.",2,N],[3,"PostComments","","Comments to frontend",N,N],[12,"comments","","A nested set of comments.",3,N],[5,"rocket_route_fn_index","","",N,[[["request"],["data"]],["outcome"]]],[5,"index","","Serve up the index file. This is only useful for development. Should not be used in a release.",N,[[],["result",["namedfile"]]]],[5,"rocket_route_fn_new_comment","","",N,[[["request"],["data"]],["outcome"]]],[5,"new_comment","","Process comment input from form.",N,[[["conn"],["result",["form","option"]],["state",["config"]],["socketaddr"]],["result",["json","failure"]]]],[5,"rocket_route_fn_initialise","","",N,[[["request"],["data"]],["outcome"]]],[5,"initialise","","Gets a Sha224 hash from a clients IP along with the blog's author hash.",N,[[["socketaddr"],["state",["config"]]],["json",["initialise"]]]],[5,"rocket_route_fn_delete_comment","","",N,[[["request"],["data"]],["outcome"]]],[5,"delete_comment","","Requests comment deletion from a user, may or may not actually delete the comment based on a number of possibilities: authentication issues, over time, etc. Secondarily, the method of deletion may differ. If the comment has children it is not deleted entirely, but flagged so that the rest of the conversation is not automatically pruned.",N,[[["conn"],["state",["config"]],["commentid"],["authhash"]],["result",["string","failure"]]]],[5,"rocket_route_fn_edit_comment","","",N,[[["request"],["data"]],["outcome"]]],[5,"edit_comment","","Requests an update to a comment from a user, which may or may not occur based on a number of possibilities: authentication issues, over time, etc.",N,[[["conn"],["state",["config"]],["commentid"],["authhash"],["result",["form","option"]],["socketaddr"]],["result",["json","failure"]]]],[5,"rocket_route_fn_like_comment","","",N,[[["request"],["data"]],["outcome"]]],[5,"like_comment","","Likes a comment so long as the current user has not done so already.",N,[[["conn"],["commentid"],["socketaddr"]],["result",["string","custom"]]]],[5,"rocket_route_fn_dislike_comment","","",N,[[["request"],["data"]],["outcome"]]],[5,"dislike_comment","","Dislikes a comment so long as the current user has not done so already.",N,[[["conn"],["commentid"],["socketaddr"]],["result",["string","custom"]]]],[5,"rocket_route_fn_get_session","","",N,[[["request"],["data"]],["outcome"]]],[5,"get_session","","Test function that returns the session hash from the database.",N,[[["conn"]],["string"]]],[5,"rocket_route_fn_get_comments","","",N,[[["request"],["data"]],["outcome"]]],[5,"get_comments","","Return a json block of comment data for the requested url.",N,[[["conn"],["post"]],["option",["json"]]]],[5,"rocket_route_fn_get_comment_count","","",N,[[["request"],["data"]],["outcome"]]],[5,"get_comment_count","","Returns the comment count for a given post from the database.",N,[[["conn"],["post"]],["string"]]],[5,"print_errors","","Prints the current error chain to the log file / stdio.",N,[[["error"]]]],[5,"rocket","","Ignite Rocket, connect to the database and start serving data. Exposes a connection to the database so we can set the session on startup.",N,N],[5,"main","","Application entry point.",N,[[]]],[0,"config","","Loads configuration data from disk.",N,N],[3,"Config","oration::config","The main struct which all input data from `oration.yaml` is pushed into.",N,N],[12,"host","","Top level location of the blog we are serving.",4,N],[12,"blog_name","","Name of the blog we are serving.",4,N],[12,"salt","","A salt for slightly more anonymous `anonymous` user identification.",4,N],[12,"author","","Blog Author to highlight as an authority in comments.",4,N],[12,"nesting_limit","","Limit of thread nesting in comments.",4,N],[12,"edit_timeout","","Time limit that restricts user editing of their own comments.",4,N],[12,"notifications","","Email notification system and connection details.",4,N],[12,"telegram","","Telegram notification endpoint details.",4,N],[3,"Author","","Details of the blog author.",N,N],[12,"name","","Blog author's name.",5,N],[12,"email","","Blog author's email address.",5,N],[12,"url","","Blog author's website.",5,N],[12,"hash","","A Sha224 hash of the blog author's details (automitically generated).",5,N],[3,"Notifications","","Details of the email notification system.",N,N],[12,"new_comment","","Toggle if an email is to be sent when a new comment is posted.",6,N],[12,"smtp_server","","SMTP connection details.",6,N],[12,"recipient","","Who to send the notification to.",6,N],[3,"SMTPServer","","Details of the SMTP server which the notification system should connect to.",N,N],[12,"host","","SMTP host url. (No need for a protocol header).",7,N],[12,"user_name","","Username for authentication.",7,N],[12,"password","","Password for authentication.",7,N],[3,"SMTPServerIterator","","Iterator helper for `SMTPServer`",N,N],[12,"server","","The SMTPServer struct.",8,N],[12,"index","","A helper index.",8,N],[3,"Recipient","","Details of a person to email the notifications to.",N,N],[12,"email","","Recipient's email address.",9,N],[12,"name","","Recipient's name.",9,N],[3,"Telegram","","Details of the telegram notification system.",N,N],[12,"push_notifications","","If true, the notification system will be active.",10,N],[12,"bot_id","","API token for your telegram bot.",10,N],[12,"chat_id","","The ID of your personal chat with the bot.",10,N],[17,"_IMPL_SERIALIZE_FOR_Config","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_Config","","",N,N],[17,"_IMPL_SERIALIZE_FOR_Author","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_Author","","",N,N],[17,"_IMPL_SERIALIZE_FOR_Notifications","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_Notifications","","",N,N],[17,"_IMPL_SERIALIZE_FOR_SMTPServer","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_SMTPServer","","",N,N],[17,"_IMPL_SERIALIZE_FOR_Recipient","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_Recipient","","",N,N],[17,"_IMPL_SERIALIZE_FOR_Telegram","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_Telegram","","",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"load","","Reads and parses data from the `oration.yaml` file and command line arguments.",4,[[],["result",["config","error"]]]],[11,"parse","","Additional checks to the configuration file that cannot be done implicitly by the type checker.",4,[[["self"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"gen_hash","","Generates a Sha224 hash for the blog author if details are set.",5,[[["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"next","","",8,[[["self"]],["option",["str"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[0,"data","oration","Houses Data Structures that are needed in multiple modules.",N,N],[3,"FormInput","oration::data","Incoming data from the web based form for a new comment.",N,N],[12,"comment","","Comment from textarea.",11,N],[12,"parent","","Parent comment if any.",11,N],[12,"name","","Optional name.",11,N],[12,"email","","Optional email.",11,N],[12,"url","","Optional website.",11,N],[12,"title","","Title of post.",11,N],[12,"path","","Path of post.",11,N],[3,"FormEdit","","Incoming data from the web based form for an edited comment.",N,N],[12,"comment","","Comment from textarea.",12,N],[12,"name","","Optional name.",12,N],[12,"email","","Optional email.",12,N],[12,"url","","Optional website.",12,N],[3,"AuthHash","","Hash of the user which wants to edit/delete a comment.",N,N],[12,"0","","",13,N],[11,"from_form","","",11,[[["formitems"],["bool"]],["result",["forminput","error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"sender_name","","Yields the senders name with a default if is empty.",11,[[["self"]],["string"]]],[11,"sender_email","","Yields the senders email address with a default if is empty.",11,[[["self"]],["string"]]],[11,"from_form","","",12,[[["formitems"],["bool"]],["result",["formedit","error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["authhash"]],["bool"]]],[11,"ne","","",13,[[["self"],["authhash"]],["bool"]]],[11,"from_request","","",13,[[["request"]],["outcome",["authhash"]]]],[11,"matches","","Checkhs if the current hash matches with the `compared` hash.",13,[[["self"],["str"]],["bool"]]],[0,"db","oration","Handles the database connection pool.",N,N],[3,"Conn","oration::db","Connection request guard type: a wrapper around an r2d2 pooled connection.",N,N],[12,"0","","",14,N],[5,"init_pool","","Initializes a database pool.",N,[[],["pool",["connectionmanager"]]]],[6,"Pool","","An alias to the type for a pool of Diesel `SQLite` connections.",N,N],[11,"deref","","",14,N],[11,"from_request","","",14,[[["request"]],["outcome",["conn"]]]],[0,"errors","oration","Handles the error chain of the program.",N,N],[3,"Error","oration::errors","The Error type.",N,N],[12,"0","","The kind of the error.",15,N],[12,"1","","Contains the error chain and the backtrace.",15,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",16,N],[13,"SessionHash","","",16,N],[13,"NoSession","","",16,N],[13,"NoThread","","",16,N],[13,"DBRead","","",16,N],[13,"DBInsert","","",16,N],[13,"Unauthorized","","",16,N],[13,"Rand","","",16,N],[13,"ConfigLoad","","",16,N],[13,"ConfigParse","","",16,N],[13,"Deserialize","","",16,N],[13,"Serialize","","",16,N],[13,"NoHTTPHandle","","",16,N],[13,"EmptySMTP","","",16,N],[13,"EmptyRecipientEmail","","",16,N],[13,"TelegramNotify","","",16,N],[13,"Request","","",16,N],[13,"PathCheckFailed","","",16,N],[13,"BuildEmail","","",16,N],[13,"SendEmail","","",16,N],[13,"BuildSmtpTransport","","",16,N],[13,"AlreadyVoted","","",16,N],[13,"__Nonexhaustive","","",16,N],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",N,N],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",17,[[["self"],["f"]],["result",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"new","","",15,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",15,N],[11,"with_chain","","",15,[[["e"],["k"]],["self"]]],[11,"kind","","",15,N],[11,"iter","","",15,[[["self"]],["iter"]]],[11,"chain_err","","",15,[[["self"],["f"]],["self"]]],[11,"backtrace","","",15,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",15,[[["error"]],["option",["internalbacktrace"]]]],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",15,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",15,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",15,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",15,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",15,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",15,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",15,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",15,[[["self"]],["str"]]],[11,"description","","",15,[[["self"]],["str"]]],[11,"cause","","",15,[[["self"]],["option",["error"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from","","",15,[[["errorkind"]],["self"]]],[11,"from","","",15,[[["str"]],["self"]]],[11,"from","","",15,[[["string"]],["self"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"description","","A string describing the error kind.",16,[[["self"]],["str"]]],[11,"from","","",16,[[["str"]],["self"]]],[11,"from","","",16,[[["string"]],["self"]]],[11,"from","","",16,[[["error"]],["self"]]],[0,"models","oration","SQL <----> Rust inerop using Diesel.",N,N],[0,"comments","oration::models","Comments table.",N,N],[3,"Comment","oration::models::comments","Queryable reference to the comments table.",N,N],[12,"id","","Primary key.",18,N],[12,"tid","","Reference to Thread.",18,N],[12,"parent","","Parent comment.",18,N],[12,"created","","Timestamp of creation.",18,N],[12,"modified","","Date modified it that's happened.",18,N],[12,"mode","","If the comment is live or under review.",18,N],[12,"remote_addr","","Remote IP.",18,N],[12,"text","","Actual comment.",18,N],[12,"author","","Commentors author if given.",18,N],[12,"email","","Commentors email address if given.",18,N],[12,"website","","Commentors website if given.",18,N],[12,"hash","","Commentors idenifier hash.",18,N],[12,"likes","","Number of likes a comment has recieved.",18,N],[12,"dislikes","","Number of dislikes a comment has recieved.",18,N],[12,"voters","","Who are the voters on this comment.",18,N],[3,"NewComment","","Insertable reference to the comments table.",N,N],[12,"tid","","Reference to Thread.",19,N],[12,"parent","","Parent comment.",19,N],[12,"created","","Timestamp of creation.",19,N],[12,"modified","","Date modified it that's happened.",19,N],[12,"mode","","If the comment is live or under review. By default an active comment has mode 0. If the admin has reviews turned on, all new comments will be flagged as mode 1, or will be set with a default mode 0 if this feature is not enabled. A comment with mode 2 indicates this comment is `deleted`, although it contains responses below it. The deleted comment with therefore be handled differently.",19,N],[12,"remote_addr","","Remote IP.",19,N],[12,"text","","Actual comment.",19,N],[12,"author","","Commentors author if given.",19,N],[12,"email","","Commentors email address if given.",19,N],[12,"website","","Commentors website if given.",19,N],[12,"hash","","Sha224 hash to identify commentor.",19,N],[12,"likes","","Number of likes a comment has recieved.",19,N],[12,"dislikes","","Number of dislikes a comment has recieved.",19,N],[12,"voters","","Who are the voters on this comment.",19,N],[3,"VotersBlob","","Bloom encoding for voters. Currently more a testing phase than final product.",N,N],[12,"bitmap","","Probabilistic matrix.",20,N],[12,"bits","","Number of bits in filter.",20,N],[12,"hashes","","All hashes in the filter.",20,N],[12,"sip_keys","","Required sip keys.",20,N],[3,"ModeDelete","","Changes required when we must use the flagged delete option.",N,N],[12,"mode","","If the comment is live or under review.",21,N],[12,"remote_addr","","Remote IP.",21,N],[12,"text","","Actual comment.",21,N],[12,"author","","Commentors author if given.",21,N],[12,"email","","Commentors email address if given.",21,N],[12,"website","","Commentors website if given.",21,N],[12,"hash","","Commentors idenifier hash.",21,N],[12,"likes","","Number of likes a comment has recieved.",21,N],[12,"dislikes","","Number of dislikes a comment has recieved.",21,N],[12,"voters","","Who are the voters on this comment.",21,N],[3,"PrintedComment","","Subset of the comments table which is to be sent to the frontend.",N,N],[12,"id","","Primary key.",22,N],[12,"parent","","Parent comment.",22,N],[12,"text","","Actual comment.",22,N],[12,"author","","Commentors author if given.",22,N],[12,"email","","Commentors email address if given.",22,N],[12,"url","","Commentors website if given.",22,N],[12,"hash","","Commentors indentifier.",22,N],[12,"created","","Timestamp of creation.",22,N],[12,"likes","","Number of likes a comment has recieved.",22,N],[12,"dislikes","","Number of dislikes a comment has recieved.",22,N],[3,"InsertedComment","","Subset of the comment which was just inserted. This data is needed to populate the frontend without calling for a complete refresh.",N,N],[12,"id","","Primary key.",23,N],[12,"parent","","Parent comment.",23,N],[12,"author","","Commentors details.",23,N],[3,"CommentEdits","","Subset of the comment which was just edited. This data is needed to populate the frontend without calling for a complete refresh.",N,N],[12,"id","","Primary key.",24,N],[12,"author","","Commentors details.",24,N],[12,"text","","Actual comment.",24,N],[12,"hash","","Commentors indentifier.",24,N],[3,"NestedComment","","Subset of the comments table which is to be nested and sent to the frontend.",N,N],[12,"id","","Primary key.",25,N],[12,"text","","Actual comment.",25,N],[12,"author","","Commentors author if given.",25,N],[12,"hash","","Commentors indentifier.",25,N],[12,"created","","Timestamp of creation.",25,N],[12,"children","","Comment children.",25,N],[12,"votes","","Total number of votes.",25,N],[5,"nesting_check","","Checks if this comment is nested too deep based on the configuration file value. If so, don't allow this to happen and just post as a reply to the previous parent.",N,[[["sqliteconnection"],["option",["i32"]],["u32"]],["result",["option","error"]]]],[5,"gen_hash","","Generates a Sha224 hash of author details. If none are set, then the possiblity of using a clients' IP address is available.",N,[[["option"],["option"],["option"],["option",["str"]]],["string"]]],[5,"update_authorised","","We only want users to be able to edit their comments if they accidentally produced a spelling mistake or somesuch. This method removes that ablility after some `offset` time.",N,[[["sqliteconnection"],["authhash"],["i32"],["f32"]],["result",["error"]]]],[5,"build_tree","","Construct a nested comment tree from the flat indexed data obtained from the database.",N,N],[5,"get_author","","Generates a value for author depending on the completeness of the author profile.",N,[[["option"],["option"],["option"]],["option",["string"]]]],[5,"count_votes","","Calculates the total vote for a comment based on its likes and dislikes.",N,[[["option",["i32"]],["option",["i32"]]],["i32"]]],[0,"_impl_queryable_for_comment","","",N,N],[0,"diesel","oration::models::comments::_impl_queryable_for_comment","",N,N],[0,"associations","oration::models::comments::_impl_queryable_for_comment::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::comments::_impl_queryable_for_comment::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::comments::_impl_queryable_for_comment::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::comments::_impl_queryable_for_comment::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::comments::_impl_queryable_for_comment::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::comments::_impl_queryable_for_comment::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::comments::_impl_queryable_for_comment::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::comments::_impl_queryable_for_comment::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::comments::_impl_queryable_for_comment::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::comments::_impl_queryable_for_comment::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::comments::_impl_queryable_for_comment::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"Sub","oration::models::comments::_impl_queryable_for_comment::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions","",N,N],[5,"sum","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions","",N,N],[5,"max","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions","",N,N],[3,"now","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions","",N,N],[6,"not","oration::models::comments::_impl_queryable_for_comment::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"In","oration::models::comments::_impl_queryable_for_comment::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"Bound","oration::models::comments::_impl_queryable_for_comment::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"Coerce","oration::models::comments::_impl_queryable_for_comment::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[5,"count","oration::models::comments::_impl_queryable_for_comment::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[5,"exists","oration::models::comments::_impl_queryable_for_comment::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"Grouped","oration::models::comments::_impl_queryable_for_comment::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::comments::_impl_queryable_for_comment::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::comments::_impl_queryable_for_comment::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"Nullable","oration::models::comments::_impl_queryable_for_comment::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"Concat","oration::models::comments::_impl_queryable_for_comment::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::comments::_impl_queryable_for_comment::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[3,"Subselect","oration::models::comments::_impl_queryable_for_comment::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::comments::_impl_queryable_for_comment::diesel::expression","",N,N],[6,"count","oration::models::comments::_impl_queryable_for_comment::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::comments::_impl_queryable_for_comment::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::comments::_impl_queryable_for_comment::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::comments::_impl_queryable_for_comment::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::comments::_impl_queryable_for_comment::diesel","",N,N],[8,"Insertable","oration::models::comments::_impl_queryable_for_comment::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::comments::_impl_queryable_for_comment::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","",N,N],[5,"update","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","",N,N],[3,"Identifier","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::comments::_impl_queryable_for_comment::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::comments::_impl_queryable_for_comment::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::comments::_impl_queryable_for_comment::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::comments::_impl_queryable_for_comment::diesel::query_source","",N,N],[3,"Join","oration::models::comments::_impl_queryable_for_comment::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::comments::_impl_queryable_for_comment::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::comments::_impl_queryable_for_comment::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::comments::_impl_queryable_for_comment::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::comments::_impl_queryable_for_comment::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::comments::_impl_queryable_for_comment::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::comments::_impl_queryable_for_comment::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","","",165,N],[8,"NotNull","","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::comments::_impl_queryable_for_comment::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::comments::_impl_queryable_for_comment::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::comments::_impl_queryable_for_comment::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::comments::_impl_queryable_for_comment::diesel","",N,N],[6,"Bool","oration::models::comments::_impl_queryable_for_comment::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::comments::_impl_queryable_for_comment::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::comments::_impl_queryable_for_comment::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::comments::_impl_queryable_for_comment::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::comments::_impl_queryable_for_comment::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::comments::_impl_queryable_for_comment::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::comments::_impl_queryable_for_comment::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::comments::_impl_queryable_for_comment::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"build","oration::models::comments","",18,N],[0,"_impl_insertable_for_newcomment","","",N,N],[0,"diesel","oration::models::comments::_impl_insertable_for_newcomment","",N,N],[0,"associations","oration::models::comments::_impl_insertable_for_newcomment::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::comments::_impl_insertable_for_newcomment::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::comments::_impl_insertable_for_newcomment::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::comments::_impl_insertable_for_newcomment::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::comments::_impl_insertable_for_newcomment::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::comments::_impl_insertable_for_newcomment::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::comments::_impl_insertable_for_newcomment::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::comments::_impl_insertable_for_newcomment::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::comments::_impl_insertable_for_newcomment::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::comments::_impl_insertable_for_newcomment::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::comments::_impl_insertable_for_newcomment::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"Sub","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions","",N,N],[5,"sum","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions","",N,N],[5,"max","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions","",N,N],[3,"now","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions","",N,N],[6,"not","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"In","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"Bound","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"Coerce","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[5,"count","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[5,"exists","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"Grouped","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"Nullable","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"Concat","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[3,"Subselect","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","",N,N],[6,"count","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::comments::_impl_insertable_for_newcomment::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::comments::_impl_insertable_for_newcomment::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::comments::_impl_insertable_for_newcomment::diesel","",N,N],[8,"Insertable","oration::models::comments::_impl_insertable_for_newcomment::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::comments::_impl_insertable_for_newcomment::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder","",N,N],[5,"update","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder","",N,N],[3,"Identifier","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::comments::_impl_insertable_for_newcomment::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_source","",N,N],[3,"Join","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::comments::_impl_insertable_for_newcomment::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::comments::_impl_insertable_for_newcomment::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::comments::_impl_insertable_for_newcomment::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::comments::_impl_insertable_for_newcomment::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::comments::_impl_insertable_for_newcomment::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::comments::_impl_insertable_for_newcomment::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::comments::_impl_insertable_for_newcomment::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::comments::_impl_insertable_for_newcomment::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::comments::_impl_insertable_for_newcomment::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::models::comments::_impl_insertable_for_newcomment::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::comments::_impl_insertable_for_newcomment::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::comments::_impl_insertable_for_newcomment::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::models::comments::_impl_insertable_for_newcomment::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::comments::_impl_insertable_for_newcomment::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::comments::_impl_insertable_for_newcomment::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::models::comments::_impl_insertable_for_newcomment::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::models::comments::_impl_insertable_for_newcomment::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::comments::_impl_insertable_for_newcomment::diesel","",N,N],[6,"Bool","oration::models::comments::_impl_insertable_for_newcomment::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::comments::_impl_insertable_for_newcomment::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::comments::_impl_insertable_for_newcomment::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::comments::_impl_insertable_for_newcomment::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::comments::_impl_insertable_for_newcomment::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::comments::_impl_insertable_for_newcomment::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::comments::_impl_insertable_for_newcomment::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::comments::_impl_insertable_for_newcomment::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"values","oration::models::comments","",19,N],[0,"_impl_as_changeset_for_modedelete","","",N,N],[0,"diesel","oration::models::comments::_impl_as_changeset_for_modedelete","",N,N],[0,"associations","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"Sub","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions","",N,N],[5,"sum","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions","",N,N],[5,"max","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions","",N,N],[3,"now","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions","",N,N],[6,"not","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"In","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"Bound","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"Coerce","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[5,"count","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[5,"exists","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"Grouped","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"Nullable","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"Concat","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[3,"Subselect","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","",N,N],[6,"count","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","",N,N],[8,"Insertable","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder","",N,N],[5,"update","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder","",N,N],[3,"Identifier","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_source","",N,N],[3,"Join","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","",N,N],[6,"Bool","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::comments::_impl_as_changeset_for_modedelete::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::comments::_impl_as_changeset_for_modedelete::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"as_changeset","oration::models::comments","",21,N],[0,"_impl_queryable_for_printedcomment","","",N,N],[0,"diesel","oration::models::comments::_impl_queryable_for_printedcomment","",N,N],[0,"associations","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::comments::_impl_queryable_for_printedcomment::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::comments::_impl_queryable_for_printedcomment::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::comments::_impl_queryable_for_printedcomment::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::comments::_impl_queryable_for_printedcomment::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::comments::_impl_queryable_for_printedcomment::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::comments::_impl_queryable_for_printedcomment::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::comments::_impl_queryable_for_printedcomment::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"Sub","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions","",N,N],[5,"sum","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions","",N,N],[5,"max","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions","",N,N],[3,"now","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions","",N,N],[6,"not","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"In","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"Bound","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"Coerce","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[5,"count","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[5,"exists","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"Grouped","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"Nullable","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"Concat","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[3,"Subselect","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","",N,N],[6,"count","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::comments::_impl_queryable_for_printedcomment::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::comments::_impl_queryable_for_printedcomment::diesel","",N,N],[8,"Insertable","oration::models::comments::_impl_queryable_for_printedcomment::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder","",N,N],[5,"update","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder","",N,N],[3,"Identifier","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_source","",N,N],[3,"Join","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::comments::_impl_queryable_for_printedcomment::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::comments::_impl_queryable_for_printedcomment::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::comments::_impl_queryable_for_printedcomment::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::comments::_impl_queryable_for_printedcomment::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::comments::_impl_queryable_for_printedcomment::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::comments::_impl_queryable_for_printedcomment::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::models::comments::_impl_queryable_for_printedcomment::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::comments::_impl_queryable_for_printedcomment::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::models::comments::_impl_queryable_for_printedcomment::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::comments::_impl_queryable_for_printedcomment::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::models::comments::_impl_queryable_for_printedcomment::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::models::comments::_impl_queryable_for_printedcomment::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::comments::_impl_queryable_for_printedcomment::diesel","",N,N],[6,"Bool","oration::models::comments::_impl_queryable_for_printedcomment::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::comments::_impl_queryable_for_printedcomment::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::comments::_impl_queryable_for_printedcomment::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::comments::_impl_queryable_for_printedcomment::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::comments::_impl_queryable_for_printedcomment::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::comments::_impl_queryable_for_printedcomment::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"build","oration::models::comments","",22,N],[17,"_IMPL_SERIALIZE_FOR_VotersBlob","","",N,N],[17,"_IMPL_DESERIALIZE_FOR_VotersBlob","","",N,N],[17,"_IMPL_SERIALIZE_FOR_PrintedComment","","",N,N],[17,"_IMPL_SERIALIZE_FOR_InsertedComment","","",N,N],[17,"_IMPL_SERIALIZE_FOR_CommentEdits","","",N,N],[17,"_IMPL_SERIALIZE_FOR_NestedComment","","",N,N],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"count","","Returns the number of comments for a given post denoted via the `path` variable.",18,[[["sqliteconnection"],["str"]],["result",["i64","error"]]]],[11,"insert","","Stores a new comment into the database.",18,[[["sqliteconnection"],["i32"],["forminput"],["str"],["u32"]],["result",["insertedcomment","error"]]]],[11,"delete","","Deletes a comment if there is no children, marks as deleted if there are children.",18,[[["sqliteconnection"],["i32"]],["result",["error"]]]],[11,"update","","Updates a comment.",18,[[["sqliteconnection"],["i32"],["formedit"],["str"]],["result",["commentedits","error"]]]],[11,"vote","","Called from the like and dislike functions and updates the vote tally for the given comment, provided the user is able to vote on this comment. We use the user's IP address here rather than the hash to ratelimit voting from the same IP by changing user details or spamming hash headers.",18,[[["sqliteconnection"],["i32"],["str"],["bool"]],["result",["error"]]]],[11,"eq","","",20,[[["self"],["votersblob"]],["bool"]]],[11,"ne","","",20,[[["self"],["votersblob"]],["bool"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Generate a voters struct.",20,[[["bloom"]],["votersblob"]]],[11,"store","","Encode the bloom filter and store it in the database.",20,[[["self"],["sqliteconnection"],["i32"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"list","","Returns a list of all comments for a given post denoted via the `path` variable.",22,[[["sqliteconnection"],["str"]],["result",["vec","error"]]]],[11,"get","","Returns a comment based on its' unique ID.",22,[[["sqliteconnection"],["i32"]],["result",["printedcomment","error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new nested comment from a PrintedComment and a set of precalculated NestedComment children.",23,[[["printedcomment"]],["insertedcomment"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new nested comment from a PrintedComment and a set of precalculated NestedComment children.",24,[[["printedcomment"]],["commentedits"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new nested comment from a PrintedComment and a set of precalculated NestedComment children.",25,[[["printedcomment"],["vec",["nestedcomment"]]],["nestedcomment"]]],[11,"list","","Returns a list of all comments, nested, for a given post denoted via the `path` variable.",25,[[["sqliteconnection"],["str"]],["result",["vec","error"]]]],[0,"preferences","oration::models","Preferences table.",N,N],[3,"Preference","oration::models::preferences","Queryable, Identifiable reference to the preferences table.",N,N],[12,"key","","Key",176,N],[12,"value","","Value",176,N],[5,"session_hash","","Generates a random hash used as a session ID.",N,[[],["result",["string","error"]]]],[0,"_impl_queryable_for_preference","","",N,N],[0,"diesel","oration::models::preferences::_impl_queryable_for_preference","",N,N],[0,"associations","oration::models::preferences::_impl_queryable_for_preference::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::preferences::_impl_queryable_for_preference::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::preferences::_impl_queryable_for_preference::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::preferences::_impl_queryable_for_preference::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::preferences::_impl_queryable_for_preference::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::preferences::_impl_queryable_for_preference::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::preferences::_impl_queryable_for_preference::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::preferences::_impl_queryable_for_preference::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::preferences::_impl_queryable_for_preference::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::preferences::_impl_queryable_for_preference::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::preferences::_impl_queryable_for_preference::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"Sub","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions","",N,N],[5,"sum","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions","",N,N],[5,"max","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions","",N,N],[3,"now","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions","",N,N],[6,"not","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"In","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"Bound","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"Coerce","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[5,"count","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[5,"exists","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"Grouped","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"Nullable","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"Concat","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[3,"Subselect","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","",N,N],[6,"count","oration::models::preferences::_impl_queryable_for_preference::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::preferences::_impl_queryable_for_preference::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::preferences::_impl_queryable_for_preference::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::preferences::_impl_queryable_for_preference::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::preferences::_impl_queryable_for_preference::diesel","",N,N],[8,"Insertable","oration::models::preferences::_impl_queryable_for_preference::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::preferences::_impl_queryable_for_preference::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder","",N,N],[5,"update","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder","",N,N],[3,"Identifier","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::models::preferences::_impl_queryable_for_preference::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::preferences::_impl_queryable_for_preference::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::preferences::_impl_queryable_for_preference::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::preferences::_impl_queryable_for_preference::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::preferences::_impl_queryable_for_preference::diesel::query_source","",N,N],[3,"Join","oration::models::preferences::_impl_queryable_for_preference::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::preferences::_impl_queryable_for_preference::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::preferences::_impl_queryable_for_preference::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::preferences::_impl_queryable_for_preference::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::preferences::_impl_queryable_for_preference::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::preferences::_impl_queryable_for_preference::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::preferences::_impl_queryable_for_preference::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::preferences::_impl_queryable_for_preference::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::preferences::_impl_queryable_for_preference::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::preferences::_impl_queryable_for_preference::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::models::preferences::_impl_queryable_for_preference::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::preferences::_impl_queryable_for_preference::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::preferences::_impl_queryable_for_preference::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::models::preferences::_impl_queryable_for_preference::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::preferences::_impl_queryable_for_preference::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::preferences::_impl_queryable_for_preference::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::models::preferences::_impl_queryable_for_preference::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::models::preferences::_impl_queryable_for_preference::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::preferences::_impl_queryable_for_preference::diesel","",N,N],[6,"Bool","oration::models::preferences::_impl_queryable_for_preference::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::preferences::_impl_queryable_for_preference::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::preferences::_impl_queryable_for_preference::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::preferences::_impl_queryable_for_preference::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::preferences::_impl_queryable_for_preference::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::preferences::_impl_queryable_for_preference::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::preferences::_impl_queryable_for_preference::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::preferences::_impl_queryable_for_preference::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"build","oration::models::preferences","",176,N],[0,"_impl_identifiable_for_preference","","",N,N],[0,"diesel","oration::models::preferences::_impl_identifiable_for_preference","",N,N],[0,"associations","oration::models::preferences::_impl_identifiable_for_preference::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::preferences::_impl_identifiable_for_preference::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::preferences::_impl_identifiable_for_preference::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::preferences::_impl_identifiable_for_preference::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::preferences::_impl_identifiable_for_preference::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::preferences::_impl_identifiable_for_preference::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::preferences::_impl_identifiable_for_preference::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::preferences::_impl_identifiable_for_preference::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::preferences::_impl_identifiable_for_preference::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::preferences::_impl_identifiable_for_preference::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::preferences::_impl_identifiable_for_preference::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"Sub","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions","",N,N],[5,"sum","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions","",N,N],[5,"max","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions","",N,N],[3,"now","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions","",N,N],[6,"not","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"In","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"Bound","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"Coerce","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[5,"count","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[5,"exists","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"Grouped","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"Nullable","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"Concat","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[3,"Subselect","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","",N,N],[6,"count","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::preferences::_impl_identifiable_for_preference::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::preferences::_impl_identifiable_for_preference::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::preferences::_impl_identifiable_for_preference::diesel","",N,N],[8,"Insertable","oration::models::preferences::_impl_identifiable_for_preference::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::preferences::_impl_identifiable_for_preference::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder","",N,N],[5,"update","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder","",N,N],[3,"Identifier","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::preferences::_impl_identifiable_for_preference::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_source","",N,N],[3,"Join","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::preferences::_impl_identifiable_for_preference::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::preferences::_impl_identifiable_for_preference::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::preferences::_impl_identifiable_for_preference::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::preferences::_impl_identifiable_for_preference::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::preferences::_impl_identifiable_for_preference::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::preferences::_impl_identifiable_for_preference::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::preferences::_impl_identifiable_for_preference::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::preferences::_impl_identifiable_for_preference::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::preferences::_impl_identifiable_for_preference::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::models::preferences::_impl_identifiable_for_preference::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::preferences::_impl_identifiable_for_preference::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::preferences::_impl_identifiable_for_preference::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::models::preferences::_impl_identifiable_for_preference::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::preferences::_impl_identifiable_for_preference::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::preferences::_impl_identifiable_for_preference::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::models::preferences::_impl_identifiable_for_preference::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::models::preferences::_impl_identifiable_for_preference::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::preferences::_impl_identifiable_for_preference::diesel","",N,N],[6,"Bool","oration::models::preferences::_impl_identifiable_for_preference::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::preferences::_impl_identifiable_for_preference::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::preferences::_impl_identifiable_for_preference::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::preferences::_impl_identifiable_for_preference::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::preferences::_impl_identifiable_for_preference::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::preferences::_impl_identifiable_for_preference::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::preferences::_impl_identifiable_for_preference::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::preferences::_impl_identifiable_for_preference::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"table","oration::models::preferences","",176,N],[11,"set_session","","Updates the sesssion key into the database only if the key does not exist. A default value is set in the migration schema and no other functions operate on this entry, so that should cover all bases.",176,[[["sqliteconnection"]],["result",["bool","error"]]]],[11,"get_session","","Returns the current session value from the database.",176,[[["sqliteconnection"]],["result",["string","error"]]]],[0,"threads","oration::models","Threads table.",N,N],[3,"Thread","oration::models::threads","Queryable reference to the threads table.",N,N],[12,"id","","Primary key",177,N],[12,"uri","","URI to the thread",177,N],[12,"title","","Thread title",177,N],[3,"NewThread","","Insertable reference to the threads table.",N,N],[12,"uri","","URI to the thread.",178,N],[12,"title","","Thread title.",178,N],[5,"gen_or_get_id","","Returns a thread ID given creation details about it. If the thread exists, an ID is returned directly, otherwise an entry is created for it first",N,[[["sqliteconnection"],["str"],["str"],["str"]],["result",["i32","error"]]]],[5,"verify_post","","Checks that the path posted actually exists on the host. Should minimise the injection attack surface.",N,[[["str"],["str"]],["result",["error"]]]],[5,"create","","Saves a new thread for URI into the database. Returns the id of the new record.",N,[[["sqliteconnection"],["str"],["option",["str"]]],["result",["i32","error"]]]],[5,"get_id","","Returns the id of a thread from the database for a given URI.",N,[[["sqliteconnection"],["str"]],["result",["i32","error"]]]],[0,"_impl_queryable_for_thread","","",N,N],[0,"diesel","oration::models::threads::_impl_queryable_for_thread","",N,N],[0,"associations","oration::models::threads::_impl_queryable_for_thread::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::threads::_impl_queryable_for_thread::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::threads::_impl_queryable_for_thread::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::threads::_impl_queryable_for_thread::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::threads::_impl_queryable_for_thread::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::threads::_impl_queryable_for_thread::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::threads::_impl_queryable_for_thread::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::threads::_impl_queryable_for_thread::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::threads::_impl_queryable_for_thread::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::threads::_impl_queryable_for_thread::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::threads::_impl_queryable_for_thread::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"Sub","oration::models::threads::_impl_queryable_for_thread::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions","",N,N],[5,"sum","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions","",N,N],[5,"max","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions","",N,N],[3,"now","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions","",N,N],[6,"not","oration::models::threads::_impl_queryable_for_thread::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"In","oration::models::threads::_impl_queryable_for_thread::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"Bound","oration::models::threads::_impl_queryable_for_thread::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"Coerce","oration::models::threads::_impl_queryable_for_thread::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[5,"count","oration::models::threads::_impl_queryable_for_thread::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[5,"exists","oration::models::threads::_impl_queryable_for_thread::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"Grouped","oration::models::threads::_impl_queryable_for_thread::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::threads::_impl_queryable_for_thread::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::threads::_impl_queryable_for_thread::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"Nullable","oration::models::threads::_impl_queryable_for_thread::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"Concat","oration::models::threads::_impl_queryable_for_thread::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::threads::_impl_queryable_for_thread::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[3,"Subselect","oration::models::threads::_impl_queryable_for_thread::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::threads::_impl_queryable_for_thread::diesel::expression","",N,N],[6,"count","oration::models::threads::_impl_queryable_for_thread::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::threads::_impl_queryable_for_thread::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::threads::_impl_queryable_for_thread::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::threads::_impl_queryable_for_thread::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::threads::_impl_queryable_for_thread::diesel","",N,N],[8,"Insertable","oration::models::threads::_impl_queryable_for_thread::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::threads::_impl_queryable_for_thread::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder","",N,N],[5,"update","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder","",N,N],[3,"Identifier","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::models::threads::_impl_queryable_for_thread::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::threads::_impl_queryable_for_thread::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::threads::_impl_queryable_for_thread::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::threads::_impl_queryable_for_thread::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::threads::_impl_queryable_for_thread::diesel::query_source","",N,N],[3,"Join","oration::models::threads::_impl_queryable_for_thread::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::threads::_impl_queryable_for_thread::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::threads::_impl_queryable_for_thread::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::threads::_impl_queryable_for_thread::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::threads::_impl_queryable_for_thread::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::threads::_impl_queryable_for_thread::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::threads::_impl_queryable_for_thread::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::threads::_impl_queryable_for_thread::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::threads::_impl_queryable_for_thread::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::threads::_impl_queryable_for_thread::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::models::threads::_impl_queryable_for_thread::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::threads::_impl_queryable_for_thread::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::threads::_impl_queryable_for_thread::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::models::threads::_impl_queryable_for_thread::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::threads::_impl_queryable_for_thread::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::threads::_impl_queryable_for_thread::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::models::threads::_impl_queryable_for_thread::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::models::threads::_impl_queryable_for_thread::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::threads::_impl_queryable_for_thread::diesel","",N,N],[6,"Bool","oration::models::threads::_impl_queryable_for_thread::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::threads::_impl_queryable_for_thread::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::threads::_impl_queryable_for_thread::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::threads::_impl_queryable_for_thread::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::threads::_impl_queryable_for_thread::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::threads::_impl_queryable_for_thread::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::threads::_impl_queryable_for_thread::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::threads::_impl_queryable_for_thread::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"build","oration::models::threads","",177,N],[0,"_impl_insertable_for_newthread","","",N,N],[0,"diesel","oration::models::threads::_impl_insertable_for_newthread","",N,N],[0,"associations","oration::models::threads::_impl_insertable_for_newthread::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::models::threads::_impl_insertable_for_newthread::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::models::threads::_impl_insertable_for_newthread::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::models::threads::_impl_insertable_for_newthread::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::models::threads::_impl_insertable_for_newthread::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::models::threads::_impl_insertable_for_newthread::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::models::threads::_impl_insertable_for_newthread::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::models::threads::_impl_insertable_for_newthread::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::models::threads::_impl_insertable_for_newthread::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::models::threads::_impl_insertable_for_newthread::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::models::threads::_impl_insertable_for_newthread::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"Sub","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[0,"aggregate_folding","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions","",N,N],[5,"sum","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions","",N,N],[5,"max","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions","",N,N],[3,"now","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions","",N,N],[6,"not","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"In","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"Bound","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"Coerce","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[5,"count","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[5,"exists","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"Grouped","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"Nullable","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"Concat","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"SqlLiteral","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[3,"Subselect","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","",N,N],[6,"count","oration::models::threads::_impl_insertable_for_newthread::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::models::threads::_impl_insertable_for_newthread::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::models::threads::_impl_insertable_for_newthread::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::models::threads::_impl_insertable_for_newthread::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::models::threads::_impl_insertable_for_newthread::diesel","",N,N],[8,"Insertable","oration::models::threads::_impl_insertable_for_newthread::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::models::threads::_impl_insertable_for_newthread::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder","",N,N],[5,"update","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder","",N,N],[3,"Identifier","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::models::threads::_impl_insertable_for_newthread::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::models::threads::_impl_insertable_for_newthread::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::models::threads::_impl_insertable_for_newthread::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::models::threads::_impl_insertable_for_newthread::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::models::threads::_impl_insertable_for_newthread::diesel::query_source","",N,N],[3,"Join","oration::models::threads::_impl_insertable_for_newthread::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::models::threads::_impl_insertable_for_newthread::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::models::threads::_impl_insertable_for_newthread::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::models::threads::_impl_insertable_for_newthread::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::models::threads::_impl_insertable_for_newthread::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::models::threads::_impl_insertable_for_newthread::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::models::threads::_impl_insertable_for_newthread::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::models::threads::_impl_insertable_for_newthread::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::models::threads::_impl_insertable_for_newthread::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::models::threads::_impl_insertable_for_newthread::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::models::threads::_impl_insertable_for_newthread::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::models::threads::_impl_insertable_for_newthread::diesel","Representation of migrations",N,N],[8,"Migration","oration::models::threads::_impl_insertable_for_newthread::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::models::threads::_impl_insertable_for_newthread::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::models::threads::_impl_insertable_for_newthread::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::models::threads::_impl_insertable_for_newthread::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::models::threads::_impl_insertable_for_newthread::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::models::threads::_impl_insertable_for_newthread::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::models::threads::_impl_insertable_for_newthread::diesel","",N,N],[6,"Bool","oration::models::threads::_impl_insertable_for_newthread::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::models::threads::_impl_insertable_for_newthread::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::models::threads::_impl_insertable_for_newthread::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::models::threads::_impl_insertable_for_newthread::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::models::threads::_impl_insertable_for_newthread::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::models::threads::_impl_insertable_for_newthread::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::models::threads::_impl_insertable_for_newthread::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::models::threads::_impl_insertable_for_newthread::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"values","oration::models::threads","",178,N],[17,"_IMPL_SERIALIZE_FOR_Thread","","",N,N],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[0,"notify","oration","Sends notifications to admin.",N,N],[5,"get_domain","oration::notify","Parses a URL, returning just the domain portion. The regex is overkill for this at the moment, but I think it may be usefull in the future to have this ability.",N,[[["str"]],["str"]]],[5,"send_notification","","Sends an email to a recipient listed in the configuration file when a new comment is posted, so long as the notification system is enabled (this check is elsewhere).",N,[[["forminput"],["notifications"],["str"],["str"],["str"]],["result",["error"]]]],[5,"push_telegram","","Sends a push notification to a bot which will forward you a message containing the recent comment.",N,[[["forminput"],["telegram"],["str"],["str"]],["result",["error"]]]],[0,"schema","oration","Verbose schema for the comment database.",N,N],[0,"comments","oration::schema","",N,N],[3,"table","oration::schema::comments","The actual table struct",N,N],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",N,N],[0,"_impl_query_id_for_table","","",N,N],[0,"diesel","oration::schema::comments::_impl_query_id_for_table","",N,N],[0,"associations","oration::schema::comments::_impl_query_id_for_table::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::_impl_query_id_for_table::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::_impl_query_id_for_table::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::_impl_query_id_for_table::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::_impl_query_id_for_table::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::_impl_query_id_for_table::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::_impl_query_id_for_table::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::_impl_query_id_for_table::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::_impl_query_id_for_table::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::_impl_query_id_for_table::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::_impl_query_id_for_table::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::_impl_query_id_for_table::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::_impl_query_id_for_table::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"In","oration::schema::comments::_impl_query_id_for_table::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::_impl_query_id_for_table::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::_impl_query_id_for_table::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[5,"count","oration::schema::comments::_impl_query_id_for_table::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[5,"exists","oration::schema::comments::_impl_query_id_for_table::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::_impl_query_id_for_table::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::_impl_query_id_for_table::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::_impl_query_id_for_table::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::_impl_query_id_for_table::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::_impl_query_id_for_table::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::_impl_query_id_for_table::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::_impl_query_id_for_table::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::_impl_query_id_for_table::diesel::expression","",N,N],[6,"count","oration::schema::comments::_impl_query_id_for_table::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::_impl_query_id_for_table::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::_impl_query_id_for_table::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::_impl_query_id_for_table::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::_impl_query_id_for_table::diesel","",N,N],[8,"Insertable","oration::schema::comments::_impl_query_id_for_table::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::_impl_query_id_for_table::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::_impl_query_id_for_table::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::_impl_query_id_for_table::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::_impl_query_id_for_table::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::_impl_query_id_for_table::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::_impl_query_id_for_table::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::_impl_query_id_for_table::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::_impl_query_id_for_table::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::_impl_query_id_for_table::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::_impl_query_id_for_table::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::_impl_query_id_for_table::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::_impl_query_id_for_table::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::_impl_query_id_for_table::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::_impl_query_id_for_table::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::_impl_query_id_for_table::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::_impl_query_id_for_table::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::_impl_query_id_for_table::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::_impl_query_id_for_table::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::_impl_query_id_for_table::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::_impl_query_id_for_table::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::_impl_query_id_for_table::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::_impl_query_id_for_table::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::_impl_query_id_for_table::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::_impl_query_id_for_table::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::_impl_query_id_for_table::diesel","",N,N],[6,"Bool","oration::schema::comments::_impl_query_id_for_table::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::_impl_query_id_for_table::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::_impl_query_id_for_table::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::_impl_query_id_for_table::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::_impl_query_id_for_table::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::_impl_query_id_for_table::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::_impl_query_id_for_table::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::_impl_query_id_for_table::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"columns","oration::schema::comments","Contains all of the columns of this table",N,N],[3,"star","oration::schema::comments::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",N,N],[3,"id","","",N,N],[3,"tid","","",N,N],[3,"parent","","",N,N],[3,"created","","",N,N],[3,"modified","","",N,N],[3,"mode","","",N,N],[3,"remote_addr","","",N,N],[3,"text","","",N,N],[3,"author","","",N,N],[3,"email","","",N,N],[3,"website","","",N,N],[3,"hash","","",N,N],[3,"likes","","",N,N],[3,"dislikes","","",N,N],[3,"voters","","",N,N],[0,"_impl_query_id_for_id","","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_id","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_id::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_id::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_id::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_id::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_id::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_id::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_id::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_id::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_id::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_id::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_id::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_id::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_id::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_id::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_id::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_id::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_id::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_id::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_id::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_id::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_id::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_id::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_id::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_id::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_id::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_id::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_id::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_id::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_id::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_tid","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_tid","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_tid::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_tid::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_parent","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_parent","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_parent::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_parent::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_created","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_created","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_created::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_created::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_created::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_created::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_created::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_created::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_created::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_created::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_created::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_created::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_created::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_created::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_created::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_created::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_created::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_created::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_created::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_created::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_created::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_created::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_created::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_created::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_created::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_created::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_created::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_created::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_created::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_created::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_created::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_modified","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_modified","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_modified::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_modified::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_mode","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_mode","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_mode::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_mode::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_remote_addr","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_remote_addr","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_remote_addr::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_text","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_text","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_text::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_text::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_text::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_text::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_text::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_text::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_text::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_text::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_text::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_text::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_text::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_text::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_text::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_text::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_text::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_text::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_text::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_text::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_text::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_text::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_text::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_text::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_text::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_text::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_text::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_text::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_text::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_text::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_text::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_author","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_author","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_author::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_author::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_author::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_author::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_author::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_author::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_author::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_author::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_author::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_author::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_author::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_author::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_author::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_author::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_author::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_author::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_author::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_author::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_author::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_author::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_author::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_author::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_author::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_author::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_author::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_author::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_author::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_author::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_author::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_email","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_email","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_email::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_email::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_email::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_email::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_email::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_email::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_email::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_email::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_email::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_email::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_email::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_email::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_email::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_email::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_email::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_email::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_email::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_email::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_email::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_email::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_email::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_email::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_email::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_email::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_email::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_email::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_email::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_email::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_email::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_website","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_website","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_website::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_website::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_website::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_website::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_website::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_website::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_website::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_website::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_website::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_website::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_website::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_website::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_website::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_website::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_website::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_website::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_website::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_website::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_website::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_website::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_website::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_website::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_website::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_website::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_website::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_website::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_website::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_website::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_website::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_hash","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_hash","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_hash::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_hash::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_likes","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_likes","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_likes::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_likes::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_dislikes","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_dislikes","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_dislikes::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_voters","oration::schema::comments::columns","",N,N],[0,"diesel","oration::schema::comments::columns::_impl_query_id_for_voters","",N,N],[0,"associations","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"Sub","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions","",N,N],[5,"sum","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions","",N,N],[5,"max","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions","",N,N],[3,"now","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions","",N,N],[6,"not","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"In","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"Bound","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"Coerce","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[5,"count","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[5,"exists","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"Grouped","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"Nullable","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"Concat","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[3,"Subselect","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","",N,N],[6,"count","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","",N,N],[8,"Insertable","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder","",N,N],[5,"update","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_source","",N,N],[3,"Join","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","",N,N],[6,"Bool","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::comments::columns::_impl_query_id_for_voters::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::comments::columns::_impl_query_id_for_voters::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"fmt","oration::schema::comments::columns","",179,[[["self"],["formatter"]],["result"]]],[11,"clone","","",179,[[["self"]],["star"]]],[11,"walk_ast","","",179,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"clone","","",180,[[["self"]],["id"]]],[11,"default","","",180,[[],["id"]]],[11,"walk_ast","","",180,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",180,N],[11,"add","","",180,N],[11,"sub","","",180,N],[11,"div","","",180,N],[11,"mul","","",180,N],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"clone","","",181,[[["self"]],["tid"]]],[11,"default","","",181,[[],["tid"]]],[11,"walk_ast","","",181,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",181,N],[11,"add","","",181,N],[11,"sub","","",181,N],[11,"div","","",181,N],[11,"mul","","",181,N],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"clone","","",182,[[["self"]],["parent"]]],[11,"default","","",182,[[],["parent"]]],[11,"walk_ast","","",182,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",182,N],[11,"add","","",182,N],[11,"sub","","",182,N],[11,"div","","",182,N],[11,"mul","","",182,N],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"clone","","",183,[[["self"]],["created"]]],[11,"default","","",183,[[],["created"]]],[11,"walk_ast","","",183,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",183,N],[11,"add","","",183,N],[11,"sub","","",183,N],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"clone","","",184,[[["self"]],["modified"]]],[11,"default","","",184,[[],["modified"]]],[11,"walk_ast","","",184,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",184,N],[11,"add","","",184,N],[11,"sub","","",184,N],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"clone","","",185,[[["self"]],["mode"]]],[11,"default","","",185,[[],["mode"]]],[11,"walk_ast","","",185,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",185,N],[11,"add","","",185,N],[11,"sub","","",185,N],[11,"div","","",185,N],[11,"mul","","",185,N],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"clone","","",186,[[["self"]],["remote_addr"]]],[11,"default","","",186,[[],["remote_addr"]]],[11,"walk_ast","","",186,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",186,N],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"clone","","",187,[[["self"]],["text"]]],[11,"default","","",187,[[],["text"]]],[11,"walk_ast","","",187,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",187,N],[11,"fmt","","",188,[[["self"],["formatter"]],["result"]]],[11,"clone","","",188,[[["self"]],["author"]]],[11,"default","","",188,[[],["author"]]],[11,"walk_ast","","",188,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",188,N],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"clone","","",189,[[["self"]],["email"]]],[11,"default","","",189,[[],["email"]]],[11,"walk_ast","","",189,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",189,N],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"clone","","",190,[[["self"]],["website"]]],[11,"default","","",190,[[],["website"]]],[11,"walk_ast","","",190,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",190,N],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"clone","","",191,[[["self"]],["hash"]]],[11,"default","","",191,[[],["hash"]]],[11,"walk_ast","","",191,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",191,N],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"clone","","",192,[[["self"]],["likes"]]],[11,"default","","",192,[[],["likes"]]],[11,"walk_ast","","",192,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",192,N],[11,"add","","",192,N],[11,"sub","","",192,N],[11,"div","","",192,N],[11,"mul","","",192,N],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"clone","","",193,[[["self"]],["dislikes"]]],[11,"default","","",193,[[],["dislikes"]]],[11,"walk_ast","","",193,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",193,N],[11,"add","","",193,N],[11,"sub","","",193,N],[11,"div","","",193,N],[11,"mul","","",193,N],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"clone","","",194,[[["self"]],["voters"]]],[11,"default","","",194,[[],["voters"]]],[11,"walk_ast","","",194,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",194,N],[6,"SqlType","oration::schema::comments","The SQL type of all of the columns on this table",N,N],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",N,N],[17,"all_columns","","A tuple of all of the columns on this table",N,N],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"clone","","",195,[[["self"]],["table"]]],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",195,[[["self"]],["star"]]],[11,"from_clause","","",195,N],[11,"default_selection","","",195,N],[11,"as_query","","",195,N],[11,"primary_key","","",195,N],[11,"all_columns","","",195,N],[11,"table","","",195,N],[11,"into_update_target","","",195,[[["self"]],["updatetarget"]]],[11,"join_target","","",195,N],[11,"join_target","","",195,N],[11,"join_target","","",195,N],[11,"join_target","","",195,N],[11,"values","","",195,N],[0,"preferences","oration::schema","",N,N],[3,"table","oration::schema::preferences","The actual table struct",N,N],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",N,N],[0,"_impl_query_id_for_table","","",N,N],[0,"diesel","oration::schema::preferences::_impl_query_id_for_table","",N,N],[0,"associations","oration::schema::preferences::_impl_query_id_for_table::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::preferences::_impl_query_id_for_table::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::preferences::_impl_query_id_for_table::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::preferences::_impl_query_id_for_table::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::preferences::_impl_query_id_for_table::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::preferences::_impl_query_id_for_table::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::preferences::_impl_query_id_for_table::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::preferences::_impl_query_id_for_table::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::preferences::_impl_query_id_for_table::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::preferences::_impl_query_id_for_table::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::preferences::_impl_query_id_for_table::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Sub","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions","",N,N],[5,"sum","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions","",N,N],[5,"max","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions","",N,N],[3,"now","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions","",N,N],[6,"not","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"In","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Bound","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Coerce","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[5,"count","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[5,"exists","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Grouped","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Nullable","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Concat","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Subselect","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","",N,N],[6,"count","oration::schema::preferences::_impl_query_id_for_table::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::preferences::_impl_query_id_for_table::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::preferences::_impl_query_id_for_table::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::preferences::_impl_query_id_for_table::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::preferences::_impl_query_id_for_table::diesel","",N,N],[8,"Insertable","oration::schema::preferences::_impl_query_id_for_table::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::preferences::_impl_query_id_for_table::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder","",N,N],[5,"update","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::preferences::_impl_query_id_for_table::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::preferences::_impl_query_id_for_table::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::preferences::_impl_query_id_for_table::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::preferences::_impl_query_id_for_table::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::preferences::_impl_query_id_for_table::diesel::query_source","",N,N],[3,"Join","oration::schema::preferences::_impl_query_id_for_table::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::preferences::_impl_query_id_for_table::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::preferences::_impl_query_id_for_table::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::preferences::_impl_query_id_for_table::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::preferences::_impl_query_id_for_table::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::preferences::_impl_query_id_for_table::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::preferences::_impl_query_id_for_table::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::preferences::_impl_query_id_for_table::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::preferences::_impl_query_id_for_table::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::preferences::_impl_query_id_for_table::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::preferences::_impl_query_id_for_table::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::preferences::_impl_query_id_for_table::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::preferences::_impl_query_id_for_table::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::preferences::_impl_query_id_for_table::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::preferences::_impl_query_id_for_table::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::preferences::_impl_query_id_for_table::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::preferences::_impl_query_id_for_table::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::preferences::_impl_query_id_for_table::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::preferences::_impl_query_id_for_table::diesel","",N,N],[6,"Bool","oration::schema::preferences::_impl_query_id_for_table::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::preferences::_impl_query_id_for_table::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::preferences::_impl_query_id_for_table::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::preferences::_impl_query_id_for_table::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::preferences::_impl_query_id_for_table::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::preferences::_impl_query_id_for_table::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::preferences::_impl_query_id_for_table::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::preferences::_impl_query_id_for_table::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"columns","oration::schema::preferences","Contains all of the columns of this table",N,N],[3,"star","oration::schema::preferences::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",N,N],[3,"key","","",N,N],[3,"value","","",N,N],[0,"_impl_query_id_for_key","","",N,N],[0,"diesel","oration::schema::preferences::columns::_impl_query_id_for_key","",N,N],[0,"associations","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"Sub","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions","",N,N],[5,"sum","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions","",N,N],[5,"max","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions","",N,N],[3,"now","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions","",N,N],[6,"not","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"In","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"Bound","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"Coerce","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[5,"count","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[5,"exists","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"Grouped","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"Nullable","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"Concat","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[3,"Subselect","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","",N,N],[6,"count","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","",N,N],[8,"Insertable","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder","",N,N],[5,"update","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_source","",N,N],[3,"Join","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","",N,N],[6,"Bool","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::preferences::columns::_impl_query_id_for_key::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::preferences::columns::_impl_query_id_for_key::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_value","oration::schema::preferences::columns","",N,N],[0,"diesel","oration::schema::preferences::columns::_impl_query_id_for_value","",N,N],[0,"associations","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"Sub","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions","",N,N],[5,"sum","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions","",N,N],[5,"max","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions","",N,N],[3,"now","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions","",N,N],[6,"not","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"In","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"Bound","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"Coerce","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[5,"count","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[5,"exists","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"Grouped","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"Nullable","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"Concat","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[3,"Subselect","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","",N,N],[6,"count","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","",N,N],[8,"Insertable","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder","",N,N],[5,"update","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_source","",N,N],[3,"Join","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","",N,N],[6,"Bool","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::preferences::columns::_impl_query_id_for_value::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::preferences::columns::_impl_query_id_for_value::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"fmt","oration::schema::preferences::columns","",196,[[["self"],["formatter"]],["result"]]],[11,"clone","","",196,[[["self"]],["star"]]],[11,"walk_ast","","",196,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"clone","","",197,[[["self"]],["key"]]],[11,"default","","",197,[[],["key"]]],[11,"walk_ast","","",197,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",197,N],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"clone","","",198,[[["self"]],["value"]]],[11,"default","","",198,[[],["value"]]],[11,"walk_ast","","",198,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",198,N],[6,"SqlType","oration::schema::preferences","The SQL type of all of the columns on this table",N,N],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",N,N],[17,"all_columns","","A tuple of all of the columns on this table",N,N],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"clone","","",199,[[["self"]],["table"]]],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",199,[[["self"]],["star"]]],[11,"from_clause","","",199,N],[11,"default_selection","","",199,N],[11,"as_query","","",199,N],[11,"primary_key","","",199,N],[11,"all_columns","","",199,N],[11,"table","","",199,N],[11,"into_update_target","","",199,[[["self"]],["updatetarget"]]],[11,"join_target","","",199,N],[11,"join_target","","",199,N],[11,"join_target","","",199,N],[11,"join_target","","",199,N],[11,"values","","",199,N],[0,"threads","oration::schema","",N,N],[3,"table","oration::schema::threads","The actual table struct",N,N],[0,"dsl","","Re-exports all of the columns of this table, as well as the table struct renamed to the module name. This is meant to be glob imported for functions which only deal with one table.",N,N],[0,"_impl_query_id_for_table","","",N,N],[0,"diesel","oration::schema::threads::_impl_query_id_for_table","",N,N],[0,"associations","oration::schema::threads::_impl_query_id_for_table::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::threads::_impl_query_id_for_table::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::threads::_impl_query_id_for_table::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::threads::_impl_query_id_for_table::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::threads::_impl_query_id_for_table::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::threads::_impl_query_id_for_table::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::threads::_impl_query_id_for_table::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::threads::_impl_query_id_for_table::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::threads::_impl_query_id_for_table::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::threads::_impl_query_id_for_table::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::threads::_impl_query_id_for_table::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Sub","oration::schema::threads::_impl_query_id_for_table::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions","",N,N],[5,"sum","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions","",N,N],[5,"max","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions","",N,N],[3,"now","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions","",N,N],[6,"not","oration::schema::threads::_impl_query_id_for_table::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"In","oration::schema::threads::_impl_query_id_for_table::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Bound","oration::schema::threads::_impl_query_id_for_table::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Coerce","oration::schema::threads::_impl_query_id_for_table::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[5,"count","oration::schema::threads::_impl_query_id_for_table::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[5,"exists","oration::schema::threads::_impl_query_id_for_table::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Grouped","oration::schema::threads::_impl_query_id_for_table::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::threads::_impl_query_id_for_table::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::threads::_impl_query_id_for_table::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Nullable","oration::schema::threads::_impl_query_id_for_table::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Concat","oration::schema::threads::_impl_query_id_for_table::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::threads::_impl_query_id_for_table::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[3,"Subselect","oration::schema::threads::_impl_query_id_for_table::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::threads::_impl_query_id_for_table::diesel::expression","",N,N],[6,"count","oration::schema::threads::_impl_query_id_for_table::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::threads::_impl_query_id_for_table::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::threads::_impl_query_id_for_table::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::threads::_impl_query_id_for_table::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::threads::_impl_query_id_for_table::diesel","",N,N],[8,"Insertable","oration::schema::threads::_impl_query_id_for_table::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::threads::_impl_query_id_for_table::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder","",N,N],[5,"update","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::threads::_impl_query_id_for_table::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::threads::_impl_query_id_for_table::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::threads::_impl_query_id_for_table::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::threads::_impl_query_id_for_table::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::threads::_impl_query_id_for_table::diesel::query_source","",N,N],[3,"Join","oration::schema::threads::_impl_query_id_for_table::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::threads::_impl_query_id_for_table::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::threads::_impl_query_id_for_table::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::threads::_impl_query_id_for_table::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::threads::_impl_query_id_for_table::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::threads::_impl_query_id_for_table::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::threads::_impl_query_id_for_table::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::threads::_impl_query_id_for_table::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::threads::_impl_query_id_for_table::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::threads::_impl_query_id_for_table::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::threads::_impl_query_id_for_table::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::threads::_impl_query_id_for_table::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::threads::_impl_query_id_for_table::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::threads::_impl_query_id_for_table::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::threads::_impl_query_id_for_table::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::threads::_impl_query_id_for_table::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::threads::_impl_query_id_for_table::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::threads::_impl_query_id_for_table::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::threads::_impl_query_id_for_table::diesel","",N,N],[6,"Bool","oration::schema::threads::_impl_query_id_for_table::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::threads::_impl_query_id_for_table::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::threads::_impl_query_id_for_table::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::threads::_impl_query_id_for_table::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::threads::_impl_query_id_for_table::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::threads::_impl_query_id_for_table::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::threads::_impl_query_id_for_table::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::threads::_impl_query_id_for_table::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"columns","oration::schema::threads","Contains all of the columns of this table",N,N],[3,"star","oration::schema::threads::columns","Represents `table_name.*`, which is sometimes needed for efficient count queries. It cannot be used in place of `all_columns`, and has a `SqlType` of `()` to prevent it being used that way",N,N],[3,"id","","",N,N],[3,"uri","","",N,N],[3,"title","","",N,N],[0,"_impl_query_id_for_id","","",N,N],[0,"diesel","oration::schema::threads::columns::_impl_query_id_for_id","",N,N],[0,"associations","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::threads::columns::_impl_query_id_for_id::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::threads::columns::_impl_query_id_for_id::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::threads::columns::_impl_query_id_for_id::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::threads::columns::_impl_query_id_for_id::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::threads::columns::_impl_query_id_for_id::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::threads::columns::_impl_query_id_for_id::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::threads::columns::_impl_query_id_for_id::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Sub","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[5,"sum","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[5,"max","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[3,"now","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions","",N,N],[6,"not","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"In","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Bound","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Coerce","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[5,"count","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[5,"exists","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Grouped","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Nullable","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Concat","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[3,"Subselect","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","",N,N],[6,"count","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::threads::columns::_impl_query_id_for_id::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::threads::columns::_impl_query_id_for_id::diesel","",N,N],[8,"Insertable","oration::schema::threads::columns::_impl_query_id_for_id::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder","",N,N],[5,"update","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_source","",N,N],[3,"Join","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::threads::columns::_impl_query_id_for_id::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::threads::columns::_impl_query_id_for_id::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::threads::columns::_impl_query_id_for_id::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::threads::columns::_impl_query_id_for_id::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::threads::columns::_impl_query_id_for_id::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::threads::columns::_impl_query_id_for_id::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::threads::columns::_impl_query_id_for_id::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::threads::columns::_impl_query_id_for_id::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::threads::columns::_impl_query_id_for_id::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::threads::columns::_impl_query_id_for_id::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::threads::columns::_impl_query_id_for_id::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::threads::columns::_impl_query_id_for_id::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::threads::columns::_impl_query_id_for_id::diesel","",N,N],[6,"Bool","oration::schema::threads::columns::_impl_query_id_for_id::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::threads::columns::_impl_query_id_for_id::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::threads::columns::_impl_query_id_for_id::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::threads::columns::_impl_query_id_for_id::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::threads::columns::_impl_query_id_for_id::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_id::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_uri","oration::schema::threads::columns","",N,N],[0,"diesel","oration::schema::threads::columns::_impl_query_id_for_uri","",N,N],[0,"associations","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"Sub","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions","",N,N],[5,"sum","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions","",N,N],[5,"max","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions","",N,N],[3,"now","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions","",N,N],[6,"not","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"In","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"Bound","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"Coerce","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[5,"count","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[5,"exists","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"Grouped","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"Nullable","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"Concat","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[3,"Subselect","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","",N,N],[6,"count","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","",N,N],[8,"Insertable","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder","",N,N],[5,"update","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_source","",N,N],[3,"Join","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","",N,N],[6,"Bool","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::threads::columns::_impl_query_id_for_uri::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_uri::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[0,"_impl_query_id_for_title","oration::schema::threads::columns","",N,N],[0,"diesel","oration::schema::threads::columns::_impl_query_id_for_title","",N,N],[0,"associations","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Traits related to relationships between multiple tables.",N,N],[8,"HasTable","oration::schema::threads::columns::_impl_query_id_for_title::diesel::associations","This trait indicates that a struct is associated with a single database table.",N,N],[16,"Table","","The table this type is associated with.",26,N],[10,"table","","Returns the table this type is associated with.",26,N],[8,"Identifiable","","This trait indicates that a struct represents a single row in a database table.",N,N],[16,"Id","","The type of this struct's identifier.",27,N],[10,"id","","Returns the identifier for this record.",27,N],[8,"GroupedBy","","The `grouped_by` function groups records by their parent.",N,N],[10,"grouped_by","","See the trait documentation.",28,N],[8,"BelongsTo","","Indicates that a type belongs to `Parent`",N,N],[16,"ForeignKey","","The foreign key of this struct",29,N],[16,"ForeignKeyColumn","","The database column representing the foreign key of the table this struct represents",29,N],[10,"foreign_key","","Returns the foreign key for `self`",29,[[["self"]],["option"]]],[10,"foreign_key_column","","Returns the foreign key column of this struct's table",29,N],[0,"backend","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Types which represent various database backends",N,N],[8,"Backend","oration::schema::threads::columns::_impl_query_id_for_title::diesel::backend","A database backend",N,N],[16,"QueryBuilder","","The concrete `QueryBuilder` implementation for this backend.",30,N],[16,"BindCollector","","The concrete `BindCollector` implementation for this backend.",30,N],[16,"RawValue","","The raw representation of a database value given to `FromSql`.",30,N],[16,"ByteOrder","","What byte order is used to transmit integers?",30,N],[8,"SupportsReturningClause","","Does this backend support `RETURNING` clauses?",N,N],[8,"SupportsDefaultKeyword","","Does this backend support the bare `DEFAULT` keyword?",N,N],[8,"UsesAnsiSavepointSyntax","","Does this backend use the standard `SAVEPOINT` syntax?",N,N],[8,"TypeMetadata","","Information about how a backend stores metadata about given SQL types",N,N],[16,"TypeMetadata","","The actual type used to represent metadata.",31,N],[16,"MetadataLookup","","The type used for runtime lookup of metadata.",31,N],[0,"connection","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Types related to database connections",N,N],[8,"SimpleConnection","oration::schema::threads::columns::_impl_query_id_for_title::diesel::connection","Perform simple operations on a backend.",N,N],[10,"batch_execute","","Execute multiple SQL statements within the same string.",32,[[["self"],["str"]],["result",["error"]]]],[8,"Connection","","A connection to a database",N,N],[16,"Backend","","The backend this type connects to",33,N],[16,"TransactionManager","","",33,N],[10,"establish","","Establishes a new connection to the database",33,[[["str"]],["result",["connectionerror"]]]],[11,"transaction","","Executes the given function inside of a database transaction",33,[[["self"],["f"]],["result"]]],[11,"begin_test_transaction","","Creates a transaction that will never be committed. This is useful for tests. Panics if called while inside of a transaction.",33,[[["self"]],["result",["error"]]]],[11,"test_transaction","","Executes the given function inside a transaction, but does not commit it. Panics if the given function returns an error.",33,[[["self"],["f"]],["t"]]],[10,"execute","","",33,[[["self"],["str"]],["result",["usize","error"]]]],[10,"query_by_index","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"query_by_name","","",33,[[["self"],["t"]],["result",["vec","error"]]]],[10,"execute_returning_count","","",33,[[["self"],["t"]],["result",["usize","error"]]]],[10,"transaction_manager","","",33,N],[3,"AnsiTransactionManager","","An implementation of `TransactionManager` which can be used for backends which use ANSI standard syntax for savepoints such as SQLite and PostgreSQL.",N,N],[12,"transaction_depth","","",34,N],[4,"MaybeCached","","",N,N],[13,"CannotCache","","",35,N],[13,"Cached","","",35,N],[4,"StatementCacheKey","","",N,N],[13,"Type","","",36,N],[13,"Sql","","",36,N],[12,"sql","oration::schema::threads::columns::_impl_query_id_for_title::diesel::connection::StatementCacheKey","",36,N],[12,"bind_types","","",36,N],[8,"TransactionManager","oration::schema::threads::columns::_impl_query_id_for_title::diesel::connection","Manages the internal transaction state for a connection.",N,N],[10,"begin_transaction","","Begin a new transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"rollback_transaction","","Rollback the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"commit_transaction","","Commit the inner-most transaction or savepoint",37,[[["self"],["conn"]],["result",["error"]]]],[10,"get_transaction_depth","","Fetch the current transaction depth",37,[[["self"]],["u32"]]],[3,"StatementCache","","",N,N],[12,"cache","","",38,N],[0,"data_types","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Structs to represent the primitive equivalent of SQL types where there is no existing Rust primitive, or where using it would be confusing (such as date and time types). This module will re-export all backend specific data structures when compiled against that backend.",N,N],[0,"deserialize","","Types and traits related to deserializing values from the database",N,N],[6,"Result","oration::schema::threads::columns::_impl_query_id_for_title::diesel::deserialize","A specialized result type representing the result of deserializing a value from the database.",N,N],[8,"Queryable","","Trait indicating that a record can be queried from the database.",N,N],[16,"Row","","The Rust type you'd like to map from.",39,N],[10,"build","","Construct an instance of this type",39,N],[8,"QueryableByName","","Deserializes the result of a query constructed with [`sql_query`].",N,N],[10,"build","","Construct an instance of `Self` from the database row",40,[[["r"]],["result",["box"]]]],[8,"FromSql","","Deserialize a single field of a given SQL type.",N,N],[10,"from_sql","","See the trait documentation.",41,[[["option"]],["result",["box"]]]],[8,"FromSqlRow","","Deserialize one or more fields.",N,N],[18,"FIELDS_NEEDED","","The number of fields that this type will consume. Must be equal to the number of times you would call `row.take()` in `build_from_row`",42,N],[10,"build_from_row","","See the trait documentation.",42,[[["t"]],["result",["box"]]]],[0,"expression","oration::schema::threads::columns::_impl_query_id_for_title::diesel","AST types representing various typed SQL expressions.",N,N],[0,"ops","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"Sub","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::ops","",N,N],[12,"lhs","","",43,N],[12,"rhs","","",43,N],[3,"Add","","",N,N],[12,"lhs","","",44,N],[12,"rhs","","",44,N],[3,"Div","","",N,N],[12,"lhs","","",45,N],[12,"rhs","","",45,N],[3,"Mul","","",N,N],[12,"lhs","","",46,N],[12,"rhs","","",46,N],[0,"functions","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[0,"aggregate_folding","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions","",N,N],[5,"sum","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions::aggregate_folding","Represents a SQL `SUM` function. This function can only take types which are Foldable.",N,[[["expr"]],["sum"]]],[5,"avg","","Represents a SQL `AVG` function. This function can only take types which are Foldable.",N,[[["expr"]],["avg"]]],[0,"aggregate_ordering","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions","",N,N],[5,"max","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions::aggregate_ordering","Represents a SQL `MAX` function. This function can only take types which are ordered.",N,[[["expr"]],["max"]]],[5,"min","","Represents a SQL `MIN` function. This function can only take types which are ordered.",N,[[["expr"]],["min"]]],[0,"date_and_time","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions","",N,N],[3,"now","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions::date_and_time","Represents the SQL `CURRENT_TIMESTAMP` constant. This is equivalent to the `NOW()` function on backends that support it.",N,N],[5,"date","","Represents the SQL `DATE` function. The argument should be a Timestamp expression, and the return value will be an expression of type Date. # Examples `ignore # #[macro_use] extern crate diesel; # extern crate chrono; # include!(\\\"../../doctest_setup.rs\\\"); # use diesel::dsl::*; # # fn main() { # let connection = establish_connection(); let today: chrono::NaiveDate = diesel::select(date(now)).first(&connection).unwrap(); # }`",N,[[["expr"]],["date"]]],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions","",N,N],[6,"not","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::functions::helper_types","The return type of `not(expr)`",N,N],[6,"Not","","The return type of `not(expr)`",N,N],[6,"max","","The return type of `max(expr)`",N,N],[6,"min","","The return type of `min(expr)`",N,N],[6,"sum","","The return type of `sum(expr)`",N,N],[6,"avg","","The return type of `avg(expr)`",N,N],[0,"array_comparison","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"In","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::array_comparison","",N,N],[12,"left","","",47,N],[12,"values","","",47,N],[3,"NotIn","","",N,N],[12,"left","","",48,N],[12,"values","","",48,N],[8,"AsInExpression","","",N,N],[16,"InExpression","","",49,N],[10,"as_in_expression","","",49,N],[8,"MaybeEmpty","","",N,N],[10,"is_empty","","",50,[[["self"]],["bool"]]],[3,"Many","","",N,N],[12,"0","","",51,N],[0,"bound","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"Bound","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::bound","",N,N],[12,"item","","",52,N],[12,"_marker","","",52,N],[0,"coerce","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"Coerce","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::coerce","Coerces an expression to be another type. No checks are performed to ensure that the new type is valid in all positions that the previous type was. This does not perform an actual cast, it just lies to our type system.",N,N],[12,"expr","","",53,N],[12,"_marker","","",53,N],[0,"count","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[5,"count","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::count","Creates a SQL `COUNT` expression",N,[[["expr"]],["count"]]],[5,"count_star","","Creates a SQL `COUNT(*)` expression",N,[[],["countstar"]]],[3,"CountStar","","",N,N],[0,"exists","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[5,"exists","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::exists","Creates a SQL `EXISTS` expression.",N,[[["t"]],["exists"]]],[3,"Exists","","",N,N],[12,"0","","",54,N],[0,"grouped","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"Grouped","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::grouped","",N,N],[12,"0","","",55,N],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","The types in this module are all shorthand for `PredicateType<Lhs, AsExpr<Rhs, Lhs>>`. Since we often need to return concrete types, instead of a boxed trait object, these can be useful for writing concise return types.",N,N],[6,"SqlTypeOf","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::helper_types","The SQL type of an expression",N,N],[6,"AsExpr","","The type of `Item` when converted to an expression with the same type as `TargetExpr`",N,N],[6,"AsExprOf","","The type of `Item` when converted to an expression of `Type`",N,N],[6,"Eq","","The return type of `lhs.eq(rhs)`",N,N],[6,"NotEq","","The return type of `lhs.ne(rhs)`",N,N],[6,"EqAny","","The return type of `lhs.eq_any(rhs)`",N,N],[6,"NeAny","","The return type of `lhs.ne_any(rhs)`",N,N],[6,"IsNull","","The return type of `expr.is_null()`",N,N],[6,"IsNotNull","","The return type of `expr.is_not_null()`",N,N],[6,"Gt","","The return type of `lhs.gt(rhs)`",N,N],[6,"GtEq","","The return type of `lhs.ge(rhs)`",N,N],[6,"Lt","","The return type of `lhs.lt(rhs)`",N,N],[6,"LtEq","","The return type of `lhs.le(rhs)`",N,N],[6,"Between","","The return type of `lhs.between(lower, upper)`",N,N],[6,"NotBetween","","The return type of `lhs.not_between(lower, upper)`",N,N],[6,"Desc","","The return type of `expr.desc()`",N,N],[6,"Asc","","The return type of `expr.asc()`",N,N],[6,"Nullable","","The return type of `expr.nullable()`",N,N],[6,"And","","The return type of `lhs.and(rhs)`",N,N],[6,"Or","","The return type of `lhs.or(rhs)`",N,N],[6,"Escape","","The return type of `lhs.escape('x')`",N,N],[6,"Like","","The return type of `lhs.like(rhs)`",N,N],[6,"NotLike","","The return type of `lhs.not_like(rhs)`",N,N],[0,"nullable","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"Nullable","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::nullable","",N,N],[12,"0","","",56,N],[0,"operators","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"Concat","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::operators","",N,N],[12,"left","","",57,N],[12,"right","","",57,N],[3,"And","","",N,N],[12,"left","","",58,N],[12,"right","","",58,N],[3,"Between","","",N,N],[12,"left","","",59,N],[12,"right","","",59,N],[3,"Escape","","",N,N],[12,"left","","",60,N],[12,"right","","",60,N],[3,"Eq","","",N,N],[12,"left","","",61,N],[12,"right","","",61,N],[3,"Gt","","",N,N],[12,"left","","",62,N],[12,"right","","",62,N],[3,"GtEq","","",N,N],[12,"left","","",63,N],[12,"right","","",63,N],[3,"Like","","",N,N],[12,"left","","",64,N],[12,"right","","",64,N],[3,"Lt","","",N,N],[12,"left","","",65,N],[12,"right","","",65,N],[3,"LtEq","","",N,N],[12,"left","","",66,N],[12,"right","","",66,N],[3,"NotBetween","","",N,N],[12,"left","","",67,N],[12,"right","","",67,N],[3,"NotEq","","",N,N],[12,"left","","",68,N],[12,"right","","",68,N],[3,"NotLike","","",N,N],[12,"left","","",69,N],[12,"right","","",69,N],[3,"Or","","",N,N],[12,"left","","",70,N],[12,"right","","",70,N],[3,"IsNull","","",N,N],[12,"expr","","",71,N],[3,"IsNotNull","","",N,N],[12,"expr","","",72,N],[3,"Asc","","",N,N],[12,"expr","","",73,N],[3,"Desc","","",N,N],[12,"expr","","",74,N],[3,"Not","","",N,N],[12,"expr","","",75,N],[0,"sql_literal","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"SqlLiteral","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::sql_literal","Returned by the [`sql()`] function.",N,N],[12,"sql","","",76,N],[12,"inner","","",76,N],[12,"_marker","","",76,N],[5,"sql","","Use literal SQL in the query builder",N,[[["str"]],["sqlliteral"]]],[3,"UncheckedBind","","Returned by the [`SqlLiteral::bind()`] method when binding a value to a fragment of SQL.",N,N],[12,"query","","",77,N],[12,"value","","",77,N],[0,"subselect","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[3,"Subselect","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::subselect","",N,N],[12,"values","","",78,N],[12,"_sql_type","","",78,N],[8,"ValidSubselect","","",N,N],[0,"dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","",N,N],[6,"count","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::dsl","The return type of `count(expr)`",N,N],[6,"count_star","","The return type of `count_star)(`",N,N],[6,"date","","The return type of `date(expr)`",N,N],[5,"not","","Creates a SQL `NOT` expression",N,[[["t"]],["not",["grouped"]]]],[8,"Expression","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression","Represents a typed fragment of SQL.",N,N],[16,"SqlType","","The type that this expression represents in SQL",79,N],[8,"AsExpression","","Converts a type to its representation for use in Diesel's query builder.",N,N],[16,"Expression","","The expression being returned",80,N],[10,"as_expression","","Perform the conversion",80,N],[8,"IntoSql","","Converts a type to its representation for use in Diesel's query builder.",N,N],[11,"into_sql","","Convert `self` to an expression for Diesel's query builder.",81,N],[11,"as_sql","","Convert `&self` to an expression for Diesel's query builder.",81,N],[8,"AppearsOnTable","","Indicates that all elements of an expression are valid given a from clause.",N,N],[8,"SelectableExpression","","Indicates that an expression can be selected from a source.",N,N],[8,"NonAggregate","","Marker trait to indicate that an expression does not include any aggregate functions.",N,N],[8,"BoxableExpression","","Helper trait used when boxing expressions.",N,N],[8,"AsExpressionList","","Converts a tuple of values into a tuple of Diesel expressions.",N,N],[16,"Expression","","The final output expression",82,N],[10,"as_expression_list","","Perform the conversion",82,N],[0,"expression_methods","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Adds various methods to construct new expressions. These traits are exported by default, and implemented automatically.",N,N],[8,"EscapeExpressionMethods","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression_methods","Adds the `escape` method to `LIKE` and `NOT LIKE`. This is used to specify the escape character for the pattern.",N,N],[11,"escape","","See the trait documentation.",83,[[["self"],["char"]],["escape"]]],[8,"EqAll","","This method is used by `FindDsl` to work with tuples. Because we cannot express this without specialization or overlapping impls, it is brute force implemented on columns in the `column!` macro.",N,N],[16,"Output","","",84,N],[10,"eq_all","","",84,N],[8,"BoolExpressionMethods","","Methods present on boolean expressions",N,N],[11,"and","","Creates a SQL `AND` expression",85,[[["self"],["t"]],["and"]]],[11,"or","","Creates a SQL `OR` expression",85,[[["self"],["t"]],["grouped",["or"]]]],[8,"ExpressionMethods","","Methods present on all expressions, except tuples",N,N],[11,"eq","","Creates a SQL `=` expression.",86,[[["self"],["t"]],["eq"]]],[11,"ne","","Creates a SQL `!=` expression.",86,[[["self"],["t"]],["noteq"]]],[11,"eq_any","","Creates a SQL `IN` statement.",86,[[["self"],["t"]],["in"]]],[11,"ne_any","","Deprecated alias for `ne_all`",86,[[["self"],["t"]],["notin"]]],[11,"ne_all","","Creates a SQL `NOT IN` statement.",86,[[["self"],["t"]],["notin"]]],[11,"is_null","","Creates a SQL `IS NULL` expression.",86,[[["self"]],["isnull"]]],[11,"is_not_null","","Creates a SQL `IS NOT NULL` expression.",86,[[["self"]],["isnotnull"]]],[11,"gt","","Creates a SQL `>` expression.",86,[[["self"],["t"]],["gt"]]],[11,"ge","","Creates a SQL `>=` expression.",86,[[["self"],["t"]],["gteq"]]],[11,"lt","","Creates a SQL `<` expression.",86,[[["self"],["t"]],["lt"]]],[11,"le","","Creates a SQL `<=` expression.",86,[[["self"],["t"]],["lteq"]]],[11,"between","","Creates a SQL `BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["between",["and"]]]],[11,"not_between","","Creates a SQL `NOT BETWEEN` expression using the given lower and upper bounds.",86,[[["self"],["t"],["u"]],["notbetween",["and"]]]],[11,"desc","","Creates a SQL `DESC` expression, representing this expression in descending order.",86,[[["self"]],["desc"]]],[11,"asc","","Creates a SQL `ASC` expression, representing this expression in ascending order.",86,[[["self"]],["asc"]]],[8,"TextExpressionMethods","","Methods present on text expressions",N,N],[11,"concat","","Concatenates two strings using the `||` operator.",87,[[["self"],["t"]],["concat"]]],[11,"like","","Returns a SQL `LIKE` expression",87,[[["self"],["t"]],["like"]]],[11,"not_like","","Returns a SQL `NOT LIKE` expression",87,[[["self"],["t"]],["notlike"]]],[8,"NullableExpressionMethods","","Methods present on all expressions",N,N],[11,"nullable","","Converts this potentially non-null expression into one which is treated as nullable. This method has no impact on the generated SQL, and is only used to allow certain comparisons that would otherwise fail to compile.",88,[[["self"]],["nullable"]]],[0,"insertable","oration::schema::threads::columns::_impl_query_id_for_title::diesel","",N,N],[8,"Insertable","oration::schema::threads::columns::_impl_query_id_for_title::diesel::insertable","Represents that a structure can be used to insert a new row into the database. This is automatically implemented for `&[T]` and `&Vec<T>` for inserting more than one record.",N,N],[16,"Values","","The `VALUES` clause to insert these records",89,N],[10,"values","","Construct `Self::Values`",89,N],[11,"insert_into","","Insert `self` into a given table.",89,[[["self"],["t"]],["insertstatement",["insert","noreturningclause"]]]],[8,"CanInsertInSingleQuery","","",N,N],[10,"rows_to_insert","","How many rows will this query insert?",90,[[["self"]],["option",["usize"]]]],[8,"InsertValues","","",N,N],[10,"column_names","","",91,[[["self"],["astpass"]],["result",["error"]]]],[4,"ColumnInsertValue","","",N,N],[13,"Expression","","",92,N],[13,"Default","","",92,N],[3,"BatchInsert","","",N,N],[12,"records","","",93,N],[12,"_marker","","",93,N],[3,"OwnedBatchInsert","","",N,N],[12,"values","","",94,N],[0,"query_builder","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Contains traits responsible for the actual construction of SQL statements",N,N],[0,"bind_collector","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder","Types related to managing bind parameters during query construction.",N,N],[8,"BindCollector","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder::bind_collector","A type which manages serializing bind parameters during query construction.",N,N],[10,"push_bound_value","","Serializes the given bind value, and collects the result.",95,N],[3,"RawBytesBindCollector","","A bind collector used by backends which transmit bind parameters as an opaque blob of bytes.",N,N],[12,"metadata","","The metadata associated with each bind parameter.",96,N],[12,"binds","","The serialized bytes for each bind parameter.",96,N],[0,"functions","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder","",N,N],[5,"update","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder::functions","Creates an `UPDATE` statement.",N,[[["t"]],["updatestatement",["setnotcalled","noreturningclause"]]]],[5,"delete","","Creates a `DELETE` statement.",N,[[["t"]],["deletestatement",["noreturningclause"]]]],[5,"insert_into","","Creates an `INSERT` statement for the target table.",N,[[["t"]],["incompleteinsertstatement",["insert"]]]],[5,"insert_or_ignore_into","","Creates an `INSERT [OR] IGNORE` statement.",N,[[["t"]],["incompleteinsertstatement",["insertorignore"]]]],[5,"select","","Creates a bare select statement, with no from clause. Primarily used for testing diesel itself, but likely useful for third party crates as well. The given expressions must be selectable from anywhere.",N,N],[5,"replace_into","","Creates a `REPLACE` statement.",N,[[["t"]],["incompleteinsertstatement",["replace"]]]],[5,"sql_query","","Construct a full SQL query using raw SQL.",N,[[["t"]],["sqlquery"]]],[0,"nodes","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder","",N,N],[3,"Identifier","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder::nodes","",N,N],[12,"0","","",97,N],[3,"InfixNode","","",N,N],[12,"lhs","","",98,N],[12,"rhs","","",98,N],[12,"middle","","",98,N],[6,"Binds","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder","",N,N],[6,"BuildQueryResult","","A specialized Result type used with the query builder.",N,N],[8,"QueryBuilder","","Constructs a SQL query from a Diesel AST.",N,N],[10,"push_sql","","Add `sql` to the end of the query being constructed.",99,N],[10,"push_identifier","","Quote `identifier`, and add it to the end of the query being constructed.",99,[[["self"],["str"]],["result",["error"]]]],[10,"push_bind_param","","Add a placeholder for a bind parameter to the end of the query being constructed.",99,N],[10,"finish","","Returns the constructed SQL query.",99,[[["self"]],["string"]]],[8,"Query","","A complete SQL query with a return type.",N,N],[16,"SqlType","","The SQL type that this query represents.",100,N],[8,"SelectQuery","","Indicates that a type is a `SELECT` statement.",N,N],[16,"SqlType","","The SQL type of the `SELECT` clause",101,N],[8,"QueryFragment","","An untyped fragment of SQL.",N,N],[10,"walk_ast","","Walk over this `QueryFragment` for all passes.",102,[[["self"],["astpass"]],["result",["error"]]]],[11,"to_sql","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Converts this `QueryFragment` to its SQL representation.",102,N],[11,"collect_binds","","Serializes all bind parameters in this query.",102,N],[11,"is_safe_to_cache_prepared","","Is this query safe to store in the prepared statement cache?",102,[[["self"]],["result",["bool","error"]]]],[11,"is_noop","","Does walking this AST have any effect?",102,[[["self"]],["result",["bool","error"]]]],[8,"AsQuery","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder","Types that can be converted into a complete, typed SQL query.",N,N],[16,"SqlType","","The SQL type of `Self::Query`",103,N],[16,"Query","","What kind of query does this type represent?",103,N],[10,"as_query","","Converts a type which semantically represents a SQL query into the actual query being executed. See the trait level docs for more.",103,N],[5,"debug_query","","Takes a query `QueryFragment` expression as an argument and returns a type that implements `fmt::Display` and `fmt::Debug` to show the query.",N,[[["t"]],["debugquery"]]],[3,"AstPass","","The primary type used when walking a Diesel AST during query execution.",N,N],[12,"internals","","",104,N],[8,"UndecoratedInsertRecord","","Marker trait to indicate that no additional operations have been added to a record for insert.",N,N],[6,"BoxedUpdateStatement","","An `UPDATE` statement with a boxed `WHERE` clause.",N,N],[3,"UpdateStatement","","Represents a complete `UPDATE` statement.",N,N],[12,"table","","",105,N],[12,"where_clause","","",105,N],[12,"values","","",105,N],[12,"returning","","",105,N],[8,"QueryId","","Uniquely identifies queries by their type for the purpose of prepared statement caching.",N,N],[16,"QueryId","","A type which uniquely represents `Self` in a SQL query.",106,N],[18,"HAS_STATIC_QUERY_ID","oration::models::comments::_impl_queryable_for_comment::diesel::query_builder","Can the SQL generated by `Self` be uniquely identified by its type?",106,N],[11,"query_id","","Returns the type id of `Self::QueryId` if `Self::HAS_STATIC_QUERY_ID`. Returns `None` otherwise.",106,[[],["option",["typeid"]]]],[3,"InsertStatement","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_builder","A fully constructed insert statement.",N,N],[12,"operator","","",107,N],[12,"target","","",107,N],[12,"records","","",107,N],[12,"returning","","",107,N],[6,"IncompleteUpdateStatement","","The type returned by `update`. The only thing you can do with this type is call `set` on it.",N,N],[3,"DeleteStatement","","Represents a SQL `DELETE` statement.",N,N],[12,"table","","",108,N],[12,"where_clause","","",108,N],[12,"returning","","",108,N],[8,"IntoUpdateTarget","","A type which can be passed to [`update`] or [`delete`].",N,N],[16,"WhereClause","","What is the `WHERE` clause of this target?",109,N],[10,"into_update_target","","Decomposes `self` into the table and where clause.",109,[[["self"]],["updatetarget"]]],[3,"UpdateTarget","","",N,N],[12,"table","","",110,N],[12,"where_clause","","",110,N],[6,"BoxedDeleteStatement","","A `DELETE` statement with a boxed `WHERE` clause",N,N],[3,"DebugQuery","","A struct that implements `fmt::Display` and `fmt::Debug` to show the SQL representation of a query.",N,N],[12,"query","","",111,N],[12,"_marker","","",111,N],[8,"AsChangeset","","Types which can be passed to `update.set`.",N,N],[16,"Target","","The table which `Self::Changeset` will be updating",112,N],[16,"Changeset","","The update statement this type represents",112,N],[10,"as_changeset","","Convert `self` into the actual update statement being executed",112,N],[3,"SelectStatement","","",N,N],[12,"select","","",113,N],[12,"from","","",113,N],[12,"distinct","","",113,N],[12,"where_clause","","",113,N],[12,"order","","",113,N],[12,"limit","","",113,N],[12,"offset","","",113,N],[12,"group_by","","",113,N],[12,"locking","","",113,N],[3,"SqlQuery","","The return value of `sql_query`.",N,N],[12,"query","","",114,N],[3,"ValuesClause","","",N,N],[12,"values","","",115,N],[12,"_marker","","",115,N],[3,"BoxedSelectStatement","","",N,N],[12,"select","","",116,N],[12,"from","","",116,N],[12,"distinct","","",116,N],[12,"where_clause","","",116,N],[12,"order","","",116,N],[12,"limit","","",116,N],[12,"offset","","",116,N],[12,"group_by","","",116,N],[12,"_marker","","",116,N],[3,"IncompleteInsertStatement","","The structure returned by [`insert_into`].",N,N],[12,"target","","",117,N],[12,"operator","","",117,N],[0,"query_dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Traits that construct SELECT statements",N,N],[0,"boxed_dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl","",N,N],[8,"BoxedDsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl::boxed_dsl","The `into_boxed` method",N,N],[16,"Output","","The return type of `internal_into_boxed`",118,N],[10,"internal_into_boxed","","See the trait documentation.",118,N],[0,"filter_dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl","",N,N],[8,"FilterDsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl::filter_dsl","The `filter` method",N,N],[16,"Output","","The type returned by `.filter`.",119,N],[10,"filter","","See the trait documentation.",119,N],[8,"FindDsl","","The `find` method",N,N],[16,"Output","","The type returned by `.find`.",120,N],[10,"find","","See the trait documentation.",120,N],[8,"OrFilterDsl","","The `or_filter` method",N,N],[16,"Output","","The type returned by `.filter`.",121,N],[10,"or_filter","","See the trait documentation.",121,N],[0,"limit_dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl","",N,N],[8,"LimitDsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl::limit_dsl","The `limit` method",N,N],[16,"Output","","The type returned by `.limit`",122,N],[10,"limit","","See the trait documentation",122,N],[0,"load_dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl","",N,N],[8,"LoadQuery","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl::load_dsl","The `load` method",N,N],[10,"internal_load","","Load this query",123,[[["self"],["conn"]],["result",["vec","error"]]]],[8,"ExecuteDsl","","The `execute` method",N,N],[10,"execute","","Execute this command",124,[[["self"],["conn"]],["result",["usize","error"]]]],[0,"select_dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl","",N,N],[8,"SelectDsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl::select_dsl","The `select` method",N,N],[16,"Output","","The type returned by `.select`",125,N],[10,"select","","See the trait documentation",125,N],[0,"methods","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl","The traits used by `QueryDsl`.",N,N],[8,"ForUpdateDsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl::methods","The `for_update` method",N,N],[16,"Output","","The type returned by `for_update`. See [`dsl::ForUpdate`] for convenient access to this type.",126,N],[10,"for_update","","See the trait level documentation",126,N],[8,"SingleValueDsl","","The `single_value` method",N,N],[16,"Output","","The type returned by `.single_value`.",127,N],[10,"single_value","","See the trait documentation.",127,N],[8,"OrderDsl","","The `order` method",N,N],[16,"Output","","The type returned by `.order`.",128,N],[10,"order","","See the trait documentation.",128,N],[8,"OffsetDsl","","The `offset` method",N,N],[16,"Output","","The type returned by `.offset`.",129,N],[10,"offset","","See the trait documentation",129,N],[8,"ModifyLockDsl","","Methods related to modifiers on locking select statements",N,N],[16,"Output","","The type returned by `modify_lock`. See [`dsl::SkipLocked`] and friends for convenient access to this type.",130,N],[10,"modify_lock","","See the trait level documentation",130,N],[8,"DistinctDsl","","The `distinct` method",N,N],[16,"Output","","The type returned by `.distinct`",131,N],[10,"distinct","","See the trait documentation.",131,N],[8,"ThenOrderDsl","","The `then_order_by` method",N,N],[16,"Output","","The type returned by `.then_order_by`.",132,N],[10,"then_order_by","","See the trait documentation.",132,N],[8,"LockingDsl","","Methods related to locking select statements",N,N],[16,"Output","","The type returned by `set_lock`. See [`dsl::ForUpdate`] and friends for convenient access to this type.",133,N],[10,"with_lock","","See the trait level documentation",133,N],[8,"QueryDsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_dsl","Methods used to construct select statements.",N,N],[11,"distinct","","Adds the `DISTINCT` keyword to a query.",134,N],[11,"select","","Adds a `SELECT` clause to the query.",134,N],[11,"count","","Get the count of a query. This is equivalent to `.select(count_star())`",134,N],[11,"inner_join","","Join two tables using a SQL `INNER JOIN`.",134,N],[11,"left_outer_join","","Join two tables using a SQL `LEFT OUTER JOIN`.",134,N],[11,"left_join","","Alias for [`left_outer_join`].",134,N],[11,"filter","","Adds to the `WHERE` clause of a query.",134,N],[11,"or_filter","","Adds to the `WHERE` clause of a query using `OR`",134,N],[11,"find","","Attempts to find a single record from the given table by primary key.",134,N],[11,"order","","Sets the order clause of a query.",134,N],[11,"order_by","","Alias for `order`",134,N],[11,"then_order_by","","Appends to the `ORDER BY` clause of this SQL query.",134,N],[11,"limit","","Sets the limit clause of the query.",134,N],[11,"offset","","Sets the offset clause of the query.",134,N],[11,"for_update","","Adds `FOR UPDATE` to the end of the select statement.",134,N],[11,"for_no_key_update","","Adds `FOR NO KEY UPDATE` to the end of the select statement.",134,N],[11,"for_share","","Adds `FOR SHARE` to the end of the select statement.",134,N],[11,"for_key_share","","Adds `FOR KEY SHARE` to the end of the select statement.",134,N],[11,"skip_locked","","Adds `SKIP LOCKED` to the end of a `FOR UPDATE` clause.",134,N],[11,"no_wait","","Adds `NOWAIT` to the end of a `FOR UPDATE` clause.",134,N],[11,"into_boxed","","Boxes the pieces of a query into a single type.",134,N],[11,"single_value","","Wraps this select statement in parenthesis, allowing it to be used as an expression.",134,N],[8,"RunQueryDsl","","Methods used to execute queries.",N,N],[11,"execute","","Executes the given command, returning the number of rows affected.",135,[[["self"],["conn"]],["result",["usize","error"]]]],[11,"load","","Executes the given query, returning a `Vec` with the returned rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"get_result","","Runs the command, and returns the affected row.",135,[[["self"],["conn"]],["result",["error"]]]],[11,"get_results","","Runs the command, returning an `Vec` with the affected rows.",135,[[["self"],["conn"]],["result",["vec","error"]]]],[11,"first","","Attempts to load a single record.",135,[[["self"],["conn"]],["result",["error"]]]],[8,"BelongingToDsl","","Constructs a query that finds record(s) based on directional association with other record(s).",N,N],[16,"Output","","The query returned by `belonging_to`",136,N],[10,"belonging_to","","Get the record(s) belonging to record(s) `other`",136,N],[8,"GroupByDsl","","This trait is not yet part of Diesel's public API. It may change in the future without a major version bump.",N,N],[16,"Output","","The type returned by `.group_by`",137,N],[10,"group_by","","See the trait documentation.",137,N],[8,"JoinWithImplicitOnClause","","`JoinDsl` support trait to emulate associated type constructors and grab the known on clause from the associations API",N,N],[16,"Output","","",138,N],[10,"join_with_implicit_on_clause","","",138,N],[8,"InternalJoinDsl","","`JoinDsl` support trait to emulate associated type constructors",N,N],[16,"Output","","",139,N],[10,"join","","",139,N],[8,"SaveChangesDsl","","Sugar for types which implement both `AsChangeset` and `Identifiable`",N,N],[11,"save_changes","","See the trait documentation.",140,[[["self"],["conn"]],["result",["error"]]]],[8,"JoinOnDsl","","Specify the `ON` clause for a join statement. This will override any implicit `ON` clause that would come from [`joinable!`]",N,N],[11,"on","","See the trait documentation.",141,[[["self"],["on"]],["onclausewrapper"]]],[0,"query_source","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Types related to describing schema, and interactions between tables.",N,N],[0,"joins","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_source","",N,N],[3,"Join","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_source::joins","A query source representing the join between two tables",N,N],[12,"left","","",142,N],[12,"right","","",142,N],[12,"kind","","",142,N],[3,"JoinOn","","A query source representing the join between two tables with an explicit `ON` given. `Join` should usually be referenced instead, as all \"type safety\" traits are implemented in terms of `Join` implementing them.",N,N],[12,"join","","",143,N],[12,"on","","",143,N],[8,"JoinTo","","Indicates that two tables can be joined without an explicit `ON` clause.",N,N],[16,"FromClause","","",144,N],[16,"OnClause","","",144,N],[10,"join_target","","",144,N],[8,"AppendSelection","","Used to ensure the sql type of `left.join(mid).join(right)` is `(Left, Mid, Right)` and not `((Left, Mid), Right)`. This needs to be separate from `TupleAppend` because we still want to keep the column lists (which are tuples) separate.",N,N],[16,"Output","","",145,N],[10,"append_selection","","",145,N],[3,"Inner","","",N,N],[3,"LeftOuter","","",N,N],[3,"OnClauseWrapper","","",N,N],[12,"source","","",146,N],[12,"on","","",146,N],[8,"QuerySource","oration::schema::threads::columns::_impl_query_id_for_title::diesel::query_source","Represents a type which can appear in the `FROM` clause. Apps should not need to concern themselves with this trait.",N,N],[16,"FromClause","","The type returned by `from_clause`",147,N],[16,"DefaultSelection","","The type returned by `default_selection`",147,N],[10,"from_clause","","The actual `FROM` clause of this type. This is typically only called in `QueryFragment` implementations.",147,N],[10,"default_selection","","The default select clause of this type, which should be used if no select clause was explicitly specified. This should always be a tuple of all the desired columns, not `star`",147,N],[8,"Column","","A column on a database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"Table","","The table which this column belongs to",148,N],[18,"NAME","","The name of this column",148,N],[8,"Table","","A SQL database table. Types which implement this trait should have been generated by the `table!` macro.",N,N],[16,"PrimaryKey","","The type returned by `primary_key`",149,N],[16,"AllColumns","","The type returned by `all_columns`",149,N],[10,"primary_key","","Returns the primary key of this table.",149,N],[10,"all_columns","","Returns a tuple of all columns belonging to this table.",149,N],[8,"AppearsInFromClause","","Determines how many times `Self` appears in `QS`",N,N],[16,"Count","","How many times does `Self` appear in `QS`?",150,N],[3,"Never","","A table never appears in the from clause.",N,N],[8,"Plus","","Add two peano numbers together.",N,N],[16,"Output","","The result of adding these numbers together",151,N],[3,"Once","","A table appears in the from clause exactly one time.",N,N],[3,"MoreThanOnce","","A table appears in the from clause two or more times.",N,N],[0,"result","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Errors, type aliases, and functions related to working with `Result`.",N,N],[4,"Error","oration::schema::threads::columns::_impl_query_id_for_title::diesel::result","Represents all the ways that a query can fail.",N,N],[13,"InvalidCString","","The query contained a nul byte.",152,N],[13,"DatabaseError","","The database returned an error.",152,N],[13,"NotFound","","No rows were returned by a query expected to return at least one row.",152,N],[13,"QueryBuilderError","","The query could not be constructed",152,N],[13,"DeserializationError","","An error occurred deserializing the data being sent to the database.",152,N],[13,"SerializationError","","An error occurred serializing the data being sent to the database.",152,N],[13,"RollbackTransaction","","Roll back the current transaction.",152,N],[13,"AlreadyInTransaction","","Attempted to perform an operation that cannot be done inside a transaction when a transaction was already open.",152,N],[13,"__Nonexhaustive","","",152,N],[4,"DatabaseErrorKind","","The kind of database error that occurred.",N,N],[13,"UniqueViolation","","A unique constraint was violated.",153,N],[13,"ForeignKeyViolation","","A foreign key constraint was violated.",153,N],[13,"UnableToSendCommand","","The query could not be sent to the database due to a protocol violation.",153,N],[13,"__Unknown","","",153,N],[8,"DatabaseErrorInformation","","Information about an error that was returned by the database.",N,N],[10,"message","","The primary human-readable error message. Typically one line.",154,[[["self"]],["str"]]],[10,"details","","An optional secondary error message providing more details about the problem, if it was provided by the database. Might span multiple lines.",154,[[["self"]],["option",["str"]]]],[10,"hint","","An optional suggestion of what to do about the problem, if one was provided by the database.",154,[[["self"]],["option",["str"]]]],[10,"table_name","","The name of the table the error was associated with, if the error was associated with a specific table and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"column_name","","The name of the column the error was associated with, if the error was associated with a specific column and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[10,"constraint_name","","The constraint that was violated if this error is a constraint violation and the backend supports retrieving that information.",154,[[["self"]],["option",["str"]]]],[4,"ConnectionError","","Errors which can occur during [`Connection::establish`]",N,N],[13,"InvalidCString","","The connection URL contained a `NUL` byte.",155,N],[13,"BadConnection","","The database returned an error.",155,N],[13,"InvalidConnectionUrl","","The connection URL could not be parsed.",155,N],[13,"CouldntSetupConfiguration","","Diesel could not configure the database connection.",155,N],[13,"__Nonexhaustive","","",155,N],[6,"QueryResult","","A specialized result type for queries.",N,N],[6,"ConnectionResult","","A specialized result type for establishing connections.",N,N],[8,"OptionalExtension","","See the method documentation.",N,N],[10,"optional","","Converts a `QueryResult<T>` into a `QueryResult<Option<T>>`.",156,[[["self"]],["result",["option","error"]]]],[3,"UnexpectedNullError","","An unexpected `NULL` was encountered during deserialization",N,N],[0,"serialize","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Types and traits related to serializing values for the database",N,N],[6,"Result","oration::schema::threads::columns::_impl_query_id_for_title::diesel::serialize","A specialized result type representing the result of serializing a value for the database.",N,N],[4,"IsNull","","Tiny enum to make the return type of `ToSql` more descriptive",N,N],[13,"Yes","","No data was written, as this type is null",157,N],[13,"No","","The value is not null",157,N],[3,"Output","","Wraps a buffer to be written by `ToSql` with additional backend specific utilities.",N,N],[12,"out","","",158,N],[12,"metadata_lookup","","",158,N],[8,"ToSql","","Serializes a single value to be sent to the database.",N,N],[10,"to_sql","","See the trait documentation.",159,[[["self"],["output"]],["result",["isnull","box"]]]],[0,"sql_types","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Types which represent a SQL data type.",N,N],[0,"ops","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sql_types","Represents the output of numeric operators in SQL",N,N],[8,"Add","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sql_types::ops","Represents SQL types which can be added.",N,N],[16,"Rhs","","The SQL type which can be added to this one",160,N],[16,"Output","","The SQL type of the result of adding `Rhs` to `Self`",160,N],[8,"Sub","","Represents SQL types which can be subtracted.",N,N],[16,"Rhs","","The SQL type which can be subtracted from this one",161,N],[16,"Output","","The SQL type of the result of subtracting `Rhs` from `Self`",161,N],[8,"Mul","","Represents SQL types which can be multiplied.",N,N],[16,"Rhs","","The SQL type which this can be multiplied by",162,N],[16,"Output","","The SQL type of the result of multiplying `Self` by `Rhs`",162,N],[8,"Div","","Represents SQL types which can be divided.",N,N],[16,"Rhs","","The SQL type which this one can be divided by",163,N],[16,"Output","","The SQL type of the result of dividing `Self` by `Rhs`",163,N],[3,"Bool","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sql_types","The boolean SQL type.",N,N],[3,"Tinyint","","The tiny integer SQL type.",N,N],[3,"SmallInt","","The small integer SQL type.",N,N],[6,"Int2","","",N,N],[6,"Smallint","","",N,N],[3,"Integer","","The integer SQL type.",N,N],[6,"Int4","","",N,N],[3,"BigInt","","The big integer SQL type.",N,N],[6,"Int8","","",N,N],[6,"Bigint","","",N,N],[3,"Float","","The float SQL type.",N,N],[6,"Float4","","",N,N],[3,"Double","","The double precision float SQL type.",N,N],[6,"Float8","","",N,N],[3,"Numeric","","The arbitrary precision numeric SQL type.",N,N],[6,"Decimal","","Alias for `Numeric`",N,N],[3,"Text","","The text SQL type.",N,N],[6,"VarChar","","The SQL `VARCHAR` type",N,N],[6,"Varchar","","",N,N],[6,"Char","","",N,N],[6,"Tinytext","","",N,N],[6,"Mediumtext","","",N,N],[6,"Longtext","","",N,N],[3,"Binary","","The binary SQL type.",N,N],[6,"Tinyblob","","",N,N],[6,"Blob","","",N,N],[6,"Mediumblob","","",N,N],[6,"Longblob","","",N,N],[6,"Varbinary","","",N,N],[6,"Bit","","",N,N],[3,"Date","","The date SQL type.",N,N],[3,"Interval","","The interval SQL type.",N,N],[3,"Time","","The time SQL type.",N,N],[3,"Timestamp","","The timestamp SQL type.",N,N],[3,"Nullable","","The nullable SQL type.",N,N],[12,"0","","",164,N],[8,"HasSqlType","","Indicates that a SQL type exists for a backend.",N,N],[10,"metadata","","Fetch the metadata for the given type",165,N],[11,"row_metadata","oration::models::comments::_impl_queryable_for_comment::diesel::sql_types","",165,N],[8,"NotNull","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sql_types","A marker trait indicating that a SQL type is not null.",N,N],[8,"IntoNullable","","Converts a type which may or may not be nullable into its nullable representation.",N,N],[16,"Nullable","","The nullable representation of this type.",166,N],[8,"SingleValue","","A marker trait indicating that a SQL type represents a single value, as opposed to a list of values.",N,N],[8,"SqlOrd","","Marker trait for types which can be used with `MAX` and `MIN`",N,N],[8,"Foldable","","Represents SQL types which can be used with `SUM` and `AVG`",N,N],[16,"Sum","","The SQL type of `sum(this_type)`",167,N],[16,"Avg","","The SQL type of `avg(this_type)`",167,N],[0,"migration","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Representation of migrations",N,N],[8,"Migration","oration::schema::threads::columns::_impl_query_id_for_title::diesel::migration","Represents a migration that interacts with diesel",N,N],[10,"version","","Get the migration version",168,[[["self"]],["str"]]],[10,"run","","Apply this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[10,"revert","","Revert this migration",168,[[["self"],["simpleconnection"]],["result",["runmigrationserror"]]]],[11,"file_path","oration::models::comments::_impl_queryable_for_comment::diesel::migration","Get the migration file path",168,[[["self"]],["option",["path"]]]],[4,"MigrationError","oration::schema::threads::columns::_impl_query_id_for_title::diesel::migration","Errors that occur while preparing to run migrations",N,N],[13,"MigrationDirectoryNotFound","","The migration directory wasn't found",169,N],[13,"UnknownMigrationFormat","","Provided migration was in an unknown format",169,N],[13,"IoError","","General system IO error",169,N],[13,"UnknownMigrationVersion","","Provided migration had an incompatible version number",169,N],[13,"NoMigrationRun","","No migrations had to be/ could be run",169,N],[13,"__NonExhaustive","","",169,N],[4,"RunMigrationsError","","Errors that occur while running migrations",N,N],[13,"MigrationError","","A general migration error occured",170,N],[13,"QueryError","","The provided migration included an invalid query",170,N],[13,"EmptyMigration","","The provided migration was empty",170,N],[13,"__NonExhaustive","","",170,N],[0,"row","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Contains the `Row` trait",N,N],[8,"Row","oration::schema::threads::columns::_impl_query_id_for_title::diesel::row","Represents a single database row. Apps should not need to concern themselves with this trait.",N,N],[10,"take","","Returns the value of the next column in the row.",171,[[["self"]],["option"]]],[10,"next_is_null","","Returns whether the next `count` columns are all `NULL`.",171,[[["self"],["usize"]],["bool"]]],[11,"advance","oration::models::comments::_impl_queryable_for_comment::diesel::row","Skips the next `count` columns. This method must be called if you are choosing not to call `take` as a result of `next_is_null` returning `true`.",171,N],[8,"NamedRow","oration::schema::threads::columns::_impl_query_id_for_title::diesel::row","Represents a row of a SQL query, where the values are accessed by name rather than by index.",N,N],[11,"get","oration::models::comments::_impl_queryable_for_comment::diesel::row","Retrieve and deserialize a single value from the query",172,[[["self"],["str"]],["result",["box"]]]],[10,"index_of","oration::schema::threads::columns::_impl_query_id_for_title::diesel::row","",172,[[["self"],["str"]],["option",["usize"]]]],[10,"get_raw_value","","",172,[[["self"],["usize"]],["option"]]],[0,"types","oration::schema::threads::columns::_impl_query_id_for_title::diesel","",N,N],[6,"Bool","oration::schema::threads::columns::_impl_query_id_for_title::diesel::types","",N,N],[6,"Tinyint","","",N,N],[6,"SmallInt","","",N,N],[6,"Integer","","",N,N],[6,"BigInt","","",N,N],[6,"Float","","",N,N],[6,"Double","","",N,N],[6,"Numeric","","",N,N],[6,"Text","","",N,N],[6,"Binary","","",N,N],[6,"Date","","",N,N],[6,"Interval","","",N,N],[6,"Time","","",N,N],[6,"Timestamp","","",N,N],[6,"Nullable","","",N,N],[6,"ToSqlOutput","","",N,N],[0,"sqlite","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Provides types and functions related to working with SQLite",N,N],[0,"query_builder","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sqlite","The SQLite query builder",N,N],[3,"SqliteQueryBuilder","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sqlite::query_builder","Constructs SQL queries for use with the SQLite backend",N,N],[12,"sql","","",173,N],[4,"SqliteType","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sqlite","Determines how a bind parameter is given to SQLite",N,N],[13,"Binary","","Bind using `sqlite3_bind_blob`",174,N],[13,"Text","","Bind using `sqlite3_bind_text`",174,N],[13,"Float","","`bytes` should contain an `f32`",174,N],[13,"Double","","`bytes` should contain an `f64`",174,N],[13,"SmallInt","","`bytes` should contain an `i16`",174,N],[13,"Integer","","`bytes` should contain an `i32`",174,N],[13,"Long","","`bytes` should contain an `i64`",174,N],[3,"Sqlite","","The SQLite backend",N,N],[3,"SqliteConnection","","Connections for the SQLite backend. Unlike other backends, \"connection URLs\" for SQLite are file paths or special identifiers like `:memory`.",N,N],[12,"statement_cache","","",175,N],[12,"raw_connection","","",175,N],[12,"transaction_manager","","",175,N],[0,"dsl","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Includes various helper types and bare functions which are named too generically to be included in prelude, but are often used when using Diesel.",N,N],[6,"Order","oration::schema::threads::columns::_impl_query_id_for_title::diesel::dsl","Represents the return type of `.order(ordering)`",N,N],[6,"ThenOrderBy","","Represents the return type of `.then_order_by(ordering)`",N,N],[6,"NoWait","","Represents the return type of `.no_wait()`",N,N],[6,"Limit","","Represents the return type of `.limit()`",N,N],[6,"LeftJoin","","Represents the return type of `.left_join(rhs)`",N,N],[6,"Offset","","Represents the return type of `.offset()`",N,N],[6,"Select","","Represents the return type of `.select(selection)`",N,N],[6,"ForNoKeyUpdate","","Represents the return type of `.for_no_key_update()`",N,N],[6,"ForKeyShare","","Represents the return type of `.for_key_share()`",N,N],[6,"OrFilter","","Represents the return type of `.or_filter(predicate)`",N,N],[6,"ForUpdate","","Represents the return type of `.for_update()`",N,N],[6,"ForShare","","Represents the return type of `.for_share()`",N,N],[6,"InnerJoin","","Represents the return type of `.inner_join(rhs)`",N,N],[6,"Find","","Represents the return type of `.find(pk)`",N,N],[6,"Filter","","Represents the return type of `.filter(predicate)`",N,N],[6,"SkipLocked","","Represents the return type of `.skip_locked()`",N,N],[6,"Update","","Represents the return type of `update(lhs).set(rhs)`",N,N],[6,"Distinct","","Represents the return type of `.distinct()`",N,N],[6,"IntoBoxed","","Represents the return type of `.into_boxed::<'a, DB>()`",N,N],[6,"FindBy","","Represents the return type of `.filter(lhs.eq(rhs))`",N,N],[6,"SingleValue","","Represents the return type of `.single_value()`",N,N],[0,"helper_types","oration::schema::threads::columns::_impl_query_id_for_title::diesel","Provide helper types for concisely writing the return type of functions. As with iterators, it is unfortunately difficult to return a partially constructed query without exposing the exact implementation of the function. Without higher kinded types, these various DSLs can't be combined into a single trait for boxing purposes.",N,N],[0,"prelude","","Re-exports important traits and types. Meant to be glob imported when using Diesel.",N,N],[14,"diesel_prefix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_postfix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"diesel_infix_operator","","Useful for libraries adding support for new SQL types. Apps should never need to call this.",N,N],[14,"__diesel_operator_to_sql","","",N,N],[14,"__diesel_operator_body","","",N,N],[14,"no_arg_sql_function","","Declare a 0 argument SQL function for use in your code. This will generate a unit struct, which is an expression representing calling this function. See `now` for example output. `now` was generated using:",N,N],[14,"no_arg_sql_function_body","","",N,N],[14,"no_arg_sql_function_body_except_to_sql","","",N,N],[14,"sql_function","","Declare a sql function for use in your code.",N,N],[14,"__diesel_sqlite_register_fn","","",N,N],[14,"__diesel_sql_function_body","","",N,N],[14,"sql_function_body","","",N,N],[14,"__diesel_for_each_tuple","","",N,N],[14,"__diesel_generate_ops_impls_if_date_time","","",N,N],[14,"date_time_expr","","",N,N],[14,"__diesel_generate_ops_impls_if_numeric","","",N,N],[14,"numeric_expr","","Indicates that an expression allows all numeric operators. If you create new SQL functions that return a numeric type, you should invoke this macro that type. Unfortunately, Rust disallows us from automatically implementing `Add` for types which implement `Expression`, under its orphan rules.",N,N],[14,"operator_allowed","","Implements the Rust operator for a given type. If you create a new SQL function, which returns a type that you'd like to use an operator on, you should invoke this macro. Unfortunately, Rust disallows us from automatically implementing `Add` and other traits from `std::ops`, under its orphan rules.",N,N],[14,"static_cond","","",N,N],[14,"impl_query_id","","Provides a standard implementation of `QueryId`. Apps should not need to concern themselves with this macro.",N,N],[14,"__diesel_parse_type_args","","Parses a sequence of type parameters and their bounds.",N,N],[14,"impl_selectable_expression","","This will implement `SelectableExpression` and `AppearsOnTable` for \"simple\" composite nodes where the where clause is roughly `AllTyParams: SelectableExpression<QS>, Self: Expression`.",N,N],[14,"not_none","","Gets the value out of an option, or returns an error.",N,N],[14,"__diesel_use_everything","","Used by `diesel_derives`, which can't access `$crate`",N,N],[14,"allow_tables_to_appear_in_same_query","","Allow two or more tables which are otherwise unrelated to be used together in a query.",N,N],[14,"joinable_inner","","",N,N],[14,"joinable","","Allow two tables to be referenced in a join query without providing an explicit `ON` clause.",N,N],[14,"__diesel_table_query_source_impl","","",N,N],[14,"table_body","","",N,N],[14,"__diesel_table_impl","","",N,N],[14,"table","","Specifies that a table exists, and what columns it has. This will create a new public module, with the same name, as the name of the table. In this module, you'll find a unit struct named `table`, and a unit struct with the names of each of the columns. In the definition, you can also specify an additional set of columns which exist, but should not be selected by default (for example, for things like full text search)",N,N],[14,"__diesel_column","","",N,N],[11,"fmt","oration::schema::threads::columns","",200,[[["self"],["formatter"]],["result"]]],[11,"clone","","",200,[[["self"]],["star"]]],[11,"walk_ast","","",200,[[["self"],["astpass"]],["queryresult"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"clone","","",201,[[["self"]],["id"]]],[11,"default","","",201,[[],["id"]]],[11,"walk_ast","","",201,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",201,N],[11,"add","","",201,N],[11,"sub","","",201,N],[11,"div","","",201,N],[11,"mul","","",201,N],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"clone","","",202,[[["self"]],["uri"]]],[11,"default","","",202,[[],["uri"]]],[11,"walk_ast","","",202,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",202,N],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"clone","","",203,[[["self"]],["title"]]],[11,"default","","",203,[[],["title"]]],[11,"walk_ast","","",203,[[["self"],["astpass"]],["queryresult"]]],[11,"eq_all","","",203,N],[6,"SqlType","oration::schema::threads","The SQL type of all of the columns on this table",N,N],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",N,N],[17,"all_columns","","A tuple of all of the columns on this table",N,N],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"clone","","",204,[[["self"]],["table"]]],[11,"star","","Represents `table_name.*`, which is sometimes necessary for efficient count queries. It cannot be used in place of `all_columns`",204,[[["self"]],["star"]]],[11,"from_clause","","",204,N],[11,"default_selection","","",204,N],[11,"as_query","","",204,N],[11,"primary_key","","",204,N],[11,"all_columns","","",204,N],[11,"table","","",204,N],[11,"into_update_target","","",204,[[["self"]],["updatetarget"]]],[11,"join_target","","",204,N],[11,"join_target","","",204,N],[11,"join_target","","",204,N],[11,"join_target","","",204,N],[11,"values","","",204,N],[11,"join_target","oration::schema::comments","",195,N],[11,"join_target","oration::schema::threads","",204,N],[0,"static_files","oration","Serves up static files through Rocket.",N,N],[5,"rocket_route_fn_files","oration::static_files","",N,[[["request"],["data"]],["outcome"]]],[5,"files","","Call serves any requested static file from public.",N,[[["pathbuf"]],["option",["namedfile"]]]],[7,"static_rocket_route_info_for_files","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_index","oration","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_new_comment","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_initialise","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_delete_comment","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_edit_comment","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_like_comment","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_dislike_comment","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_get_session","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_get_comments","","Rocket code generated static route information structure.",N,N],[7,"static_rocket_route_info_for_get_comment_count","","Rocket code generated static route information structure.",N,N],[17,"_IMPL_SERIALIZE_FOR_Initialise","","",N,N],[17,"_IMPL_SERIALIZE_FOR_PostComments","","",N,N],[11,"from_form","","",1,[[["formitems"],["bool"]],["result",["commentid","error"]]]],[11,"clone","","",1,[[["self"]],["commentid"]]],[11,"from_form","","",2,[[["formitems"],["bool"]],["result",["post","error"]]]],[11,"immediate_transaction","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sqlite","Run a transaction with `BEGIN IMMEDIATE`",175,[[["self"],["f"]],["result"]]],[11,"exclusive_transaction","","Run a transaction with `BEGIN EXCLUSIVE`",175,[[["self"],["f"]],["result"]]],[11,"register_sql_function","","",175,[[["self"],["str"],["bool"],["f"]],["result",["error"]]]],[11,"mul","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::sql_literal","",76,N],[11,"div","","",76,N],[11,"add","","",76,N],[11,"from","oration::schema::threads::columns::_impl_query_id_for_title::diesel::result","",155,[[["nulerror"]],["connectionerror"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::sql_literal","",76,N],[11,"batch_execute","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sqlite","",175,[[["self"],["str"]],["result",["error"]]]],[11,"clone","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::sql_literal","",76,[[["self"]],["sqlliteral"]]],[11,"clone","","",77,[[["self"]],["uncheckedbind"]]],[11,"description","oration::schema::threads::columns::_impl_query_id_for_title::diesel::result","",155,[[["self"]],["str"]]],[11,"cause","","",155,[[["self"]],["option",["error"]]]],[11,"establish","oration::schema::threads::columns::_impl_query_id_for_title::diesel::sqlite","",175,[[["str"]],["result",["sqliteconnection","connectionerror"]]]],[11,"execute","","",175,[[["self"],["str"]],["result",["usize","error"]]]],[11,"query_by_index","","",175,[[["self"],["t"]],["result",["vec","error"]]]],[11,"query_by_name","","",175,[[["self"],["t"]],["result",["vec","error"]]]],[11,"execute_returning_count","","",175,[[["self"],["t"]],["result",["usize","error"]]]],[11,"transaction_manager","","",175,N],[11,"begin_transaction","oration::schema::threads::columns::_impl_query_id_for_title::diesel::connection","",34,[[["self"],["conn"]],["result",["error"]]]],[11,"rollback_transaction","","",34,[[["self"],["conn"]],["result",["error"]]]],[11,"commit_transaction","","",34,[[["self"],["conn"]],["result",["error"]]]],[11,"get_transaction_depth","","",34,[[["self"]],["u32"]]],[11,"default","","",34,[[],["ansitransactionmanager"]]],[11,"fmt","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::sql_literal","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","oration::schema::threads::columns::_impl_query_id_for_title::diesel::result","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",155,[[["self"],["connectionerror"]],["bool"]]],[11,"ne","","",155,[[["self"],["connectionerror"]],["bool"]]],[11,"new","oration::schema::threads::columns::_impl_query_id_for_title::diesel::connection","Create a new transaction manager",34,[[],["ansitransactionmanager"]]],[11,"begin_transaction_sql","","Begin a transaction with custom SQL",34,[[["self"],["conn"],["str"]],["result",["error"]]]],[11,"new","oration::schema::threads::columns::_impl_query_id_for_title::diesel::expression::sql_literal","",76,[[["string"],["t"]],["sqlliteral"]]],[11,"bind","","Bind a value for use with this SQL query.",76,[[["self"],["u"]],["uncheckedbind",["sqlliteral"]]]],[11,"sql","","Use literal SQL in the query builder",76,[[["self"],["str"]],["sqlliteral",["sqlliteral"]]]],[11,"sql","","Use literal SQL in the query builder",77,[[["self"],["str"]],["sqlliteral",["uncheckedbind"]]]]],"paths":[[3,"Initialise"],[3,"CommentId"],[3,"Post"],[3,"PostComments"],[3,"Config"],[3,"Author"],[3,"Notifications"],[3,"SMTPServer"],[3,"SMTPServerIterator"],[3,"Recipient"],[3,"Telegram"],[3,"FormInput"],[3,"FormEdit"],[3,"AuthHash"],[3,"Conn"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"Comment"],[3,"NewComment"],[3,"VotersBlob"],[3,"ModeDelete"],[3,"PrintedComment"],[3,"InsertedComment"],[3,"CommentEdits"],[3,"NestedComment"],[8,"HasTable"],[8,"Identifiable"],[8,"GroupedBy"],[8,"BelongsTo"],[8,"Backend"],[8,"TypeMetadata"],[8,"SimpleConnection"],[8,"Connection"],[3,"AnsiTransactionManager"],[4,"MaybeCached"],[4,"StatementCacheKey"],[8,"TransactionManager"],[3,"StatementCache"],[8,"Queryable"],[8,"QueryableByName"],[8,"FromSql"],[8,"FromSqlRow"],[3,"Sub"],[3,"Add"],[3,"Div"],[3,"Mul"],[3,"In"],[3,"NotIn"],[8,"AsInExpression"],[8,"MaybeEmpty"],[3,"Many"],[3,"Bound"],[3,"Coerce"],[3,"Exists"],[3,"Grouped"],[3,"Nullable"],[3,"Concat"],[3,"And"],[3,"Between"],[3,"Escape"],[3,"Eq"],[3,"Gt"],[3,"GtEq"],[3,"Like"],[3,"Lt"],[3,"LtEq"],[3,"NotBetween"],[3,"NotEq"],[3,"NotLike"],[3,"Or"],[3,"IsNull"],[3,"IsNotNull"],[3,"Asc"],[3,"Desc"],[3,"Not"],[3,"SqlLiteral"],[3,"UncheckedBind"],[3,"Subselect"],[8,"Expression"],[8,"AsExpression"],[8,"IntoSql"],[8,"AsExpressionList"],[8,"EscapeExpressionMethods"],[8,"EqAll"],[8,"BoolExpressionMethods"],[8,"ExpressionMethods"],[8,"TextExpressionMethods"],[8,"NullableExpressionMethods"],[8,"Insertable"],[8,"CanInsertInSingleQuery"],[8,"InsertValues"],[4,"ColumnInsertValue"],[3,"BatchInsert"],[3,"OwnedBatchInsert"],[8,"BindCollector"],[3,"RawBytesBindCollector"],[3,"Identifier"],[3,"InfixNode"],[8,"QueryBuilder"],[8,"Query"],[8,"SelectQuery"],[8,"QueryFragment"],[8,"AsQuery"],[3,"AstPass"],[3,"UpdateStatement"],[8,"QueryId"],[3,"InsertStatement"],[3,"DeleteStatement"],[8,"IntoUpdateTarget"],[3,"UpdateTarget"],[3,"DebugQuery"],[8,"AsChangeset"],[3,"SelectStatement"],[3,"SqlQuery"],[3,"ValuesClause"],[3,"BoxedSelectStatement"],[3,"IncompleteInsertStatement"],[8,"BoxedDsl"],[8,"FilterDsl"],[8,"FindDsl"],[8,"OrFilterDsl"],[8,"LimitDsl"],[8,"LoadQuery"],[8,"ExecuteDsl"],[8,"SelectDsl"],[8,"ForUpdateDsl"],[8,"SingleValueDsl"],[8,"OrderDsl"],[8,"OffsetDsl"],[8,"ModifyLockDsl"],[8,"DistinctDsl"],[8,"ThenOrderDsl"],[8,"LockingDsl"],[8,"QueryDsl"],[8,"RunQueryDsl"],[8,"BelongingToDsl"],[8,"GroupByDsl"],[8,"JoinWithImplicitOnClause"],[8,"InternalJoinDsl"],[8,"SaveChangesDsl"],[8,"JoinOnDsl"],[3,"Join"],[3,"JoinOn"],[8,"JoinTo"],[8,"AppendSelection"],[3,"OnClauseWrapper"],[8,"QuerySource"],[8,"Column"],[8,"Table"],[8,"AppearsInFromClause"],[8,"Plus"],[4,"Error"],[4,"DatabaseErrorKind"],[8,"DatabaseErrorInformation"],[4,"ConnectionError"],[8,"OptionalExtension"],[4,"IsNull"],[3,"Output"],[8,"ToSql"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[3,"Nullable"],[8,"HasSqlType"],[8,"IntoNullable"],[8,"Foldable"],[8,"Migration"],[4,"MigrationError"],[4,"RunMigrationsError"],[8,"Row"],[8,"NamedRow"],[3,"SqliteQueryBuilder"],[4,"SqliteType"],[3,"SqliteConnection"],[3,"Preference"],[3,"Thread"],[3,"NewThread"],[3,"star"],[3,"id"],[3,"tid"],[3,"parent"],[3,"created"],[3,"modified"],[3,"mode"],[3,"remote_addr"],[3,"text"],[3,"author"],[3,"email"],[3,"website"],[3,"hash"],[3,"likes"],[3,"dislikes"],[3,"voters"],[3,"table"],[3,"star"],[3,"key"],[3,"value"],[3,"table"],[3,"star"],[3,"id"],[3,"uri"],[3,"title"],[3,"table"]]};
initSearch(searchIndex);
